<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\AMCHost.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\AMCHost.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Thu Jan 31 19:48:18 2019
<BR><P>
<H3>Maximum Stack Usage =        400 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; AUTOMATE::Checking() &rArr; AUTOMATE::ConsoleGetCommand() &rArr; SHELL::Decoder() &rArr; INSTRUCTION::AutoHome() &rArr; INSTRUCTION::PrintNum(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[4d]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SysTick_Handler</a><BR>
 <LI><a href="#[20]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[10]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">TIM3_IRQHandler</a> from automate.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USART2_IRQHandler</a> from ibus.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">USART3_IRQHandler</a> from cbus.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[f5]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f6]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[f7]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[f8]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[f9]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[42]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[fa]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[100]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[101]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[102]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[103]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[104]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[105]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[106]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[107]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[108]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[109]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[10c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[10d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[47]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[10f]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[110]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[111]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[112]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[113]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[114]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[115]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[116]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[41]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[117]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[43]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 400 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; AUTOMATE::Checking() &rArr; AUTOMATE::ConsoleGetCommand() &rArr; SHELL::Decoder() &rArr; INSTRUCTION::AutoHome() &rArr; INSTRUCTION::PrintNum(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[118]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[4e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[46]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[119]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[48]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
</UL>

<P><STRONG><a name="[11a]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[db]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
</UL>

<P><STRONG><a name="[4a]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Identify(char**, unsigned)
</UL>

<P><STRONG><a name="[11b]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[11c]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[11d]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[45]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[121]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[122]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[123]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, automate.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::ConsoleGetCommandCount()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::InfoLCDRefreashCount()
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatusCount()
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatusCount()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART2_IRQHandler</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, ibus.o(i.USART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART3_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, cbus.o(i.USART3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>Delay_Ms(unsigned)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(i._Z8Delay_Msj))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>INSTRUCTION::GetStaExtA()</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION10GetStaExtAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = INSTRUCTION::GetStaExtA() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[57]"></a>INSTRUCTION::GetStaExtB()</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION10GetStaExtBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = INSTRUCTION::GetStaExtB() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[58]"></a>INSTRUCTION::GetTemExtA()</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION10GetTemExtAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::GetTemExtA() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[5a]"></a>INSTRUCTION::GetTemExtB()</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION10GetTemExtBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::GetTemExtB() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[5b]"></a>INSTRUCTION::SetColExtA()</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION10SetColExtAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::SetColExtA() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderA(unsigned char)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::GetNumber(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[5e]"></a>INSTRUCTION::SetColExtB()</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION10SetColExtBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::SetColExtB() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderB(unsigned char)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::GetNumber(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[60]"></a>INSTRUCTION::SetTemExtA()</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION10SetTemExtAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::SetTemExtA() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEASetting(unsigned short)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::GetNumber(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[62]"></a>INSTRUCTION::SetTemExtB()</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION10SetTemExtBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::SetTemExtB() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEBSetting(unsigned short)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::GetNumber(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[64]"></a>INSTRUCTION::GetColPowEA()</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION11GetColPowEAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::GetColPowEA() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[65]"></a>INSTRUCTION::GetColPowEB()</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION11GetColPowEBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::GetColPowEB() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[66]"></a>INSTRUCTION::RefreshDict()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION11RefreshDictEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = INSTRUCTION::RefreshDict() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::DictInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[68]"></a>INSTRUCTION::AutoHomeInit()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION12AutoHomeInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = INSTRUCTION::AutoHomeInit() &rArr; SHELL::Expand(char*) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Expand(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
</UL>

<P><STRONG><a name="[6a]"></a>INSTRUCTION::GetStaBPInit()</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION12GetStaBPInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = INSTRUCTION::GetStaBPInit() &rArr; SHELL::Expand(char*) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Expand(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
</UL>

<P><STRONG><a name="[6b]"></a>INSTRUCTION::GetTemBPInit()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION12GetTemBPInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = INSTRUCTION::GetTemBPInit() &rArr; SHELL::Expand(char*) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Expand(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
</UL>

<P><STRONG><a name="[6c]"></a>INSTRUCTION::SetTemBPInit()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION12SetTemBPInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = INSTRUCTION::SetTemBPInit() &rArr; SHELL::Expand(char*) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Expand(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
</UL>

<P><STRONG><a name="[6d]"></a>INSTRUCTION::GetTemBPSInit()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION13GetTemBPSInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = INSTRUCTION::GetTemBPSInit() &rArr; SHELL::Expand(char*) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Expand(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
</UL>

<P><STRONG><a name="[6e]"></a>INSTRUCTION::GetTemEASInit()</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION13GetTemEASInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = INSTRUCTION::GetTemEASInit() &rArr; SHELL::Expand(char*) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Expand(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
</UL>

<P><STRONG><a name="[6f]"></a>INSTRUCTION::GetTemEBSInit()</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION13GetTemEBSInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = INSTRUCTION::GetTemEBSInit() &rArr; SHELL::Expand(char*) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Expand(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
</UL>

<P><STRONG><a name="[70]"></a>INSTRUCTION::GetTemEnvInit()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION13GetTemEnvInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = INSTRUCTION::GetTemEnvInit() &rArr; SHELL::Expand(char*) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Expand(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
</UL>

<P><STRONG><a name="[71]"></a>INSTRUCTION::GetStaExtAInit()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION14GetStaExtAInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = INSTRUCTION::GetStaExtAInit() &rArr; SHELL::Expand(char*) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Expand(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
</UL>

<P><STRONG><a name="[72]"></a>INSTRUCTION::GetStaExtBInit()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION14GetStaExtBInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = INSTRUCTION::GetStaExtBInit() &rArr; SHELL::Expand(char*) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Expand(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
</UL>

<P><STRONG><a name="[73]"></a>INSTRUCTION::GetTemExtAInit()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION14GetTemExtAInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = INSTRUCTION::GetTemExtAInit() &rArr; SHELL::Expand(char*) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Expand(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
</UL>

<P><STRONG><a name="[74]"></a>INSTRUCTION::GetTemExtBInit()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION14GetTemExtBInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = INSTRUCTION::GetTemExtBInit() &rArr; SHELL::Expand(char*) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Expand(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
</UL>

<P><STRONG><a name="[75]"></a>INSTRUCTION::SetColExtAInit()</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION14SetColExtAInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = INSTRUCTION::SetColExtAInit() &rArr; SHELL::Expand(char*) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Expand(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
</UL>

<P><STRONG><a name="[76]"></a>INSTRUCTION::SetColExtBInit()</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION14SetColExtBInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = INSTRUCTION::SetColExtBInit() &rArr; SHELL::Expand(char*) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Expand(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
</UL>

<P><STRONG><a name="[77]"></a>INSTRUCTION::SetTemExtAInit()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION14SetTemExtAInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = INSTRUCTION::SetTemExtAInit() &rArr; SHELL::Expand(char*) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Expand(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
</UL>

<P><STRONG><a name="[78]"></a>INSTRUCTION::SetTemExtBInit()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION14SetTemExtBInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = INSTRUCTION::SetTemExtBInit() &rArr; SHELL::Expand(char*) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Expand(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
</UL>

<P><STRONG><a name="[79]"></a>INSTRUCTION::GetColPowEAInit()</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION15GetColPowEAInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = INSTRUCTION::GetColPowEAInit() &rArr; SHELL::Expand(char*) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Expand(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
</UL>

<P><STRONG><a name="[7a]"></a>INSTRUCTION::GetColPowEBInit()</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION15GetColPowEBInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = INSTRUCTION::GetColPowEBInit() &rArr; SHELL::Expand(char*) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Expand(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
</UL>

<P><STRONG><a name="[7b]"></a>INSTRUCTION::RefreshDictInit()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION15RefreshDictInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = INSTRUCTION::RefreshDictInit() &rArr; SHELL::Expand(char*) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Expand(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
</UL>

<P><STRONG><a name="[59]"></a>INSTRUCTION::Num2Chr(char*, unsigned)</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, instruction.o(i._ZN11INSTRUCTION7Num2ChrEPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = INSTRUCTION::Num2Chr(char*, unsigned) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::PrintNum(unsigned)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemEnv()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemEBS()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemEAS()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemBPS()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemBP()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemBP()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetColPowEB()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetColPowEA()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtB()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtA()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtB()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtA()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemExtB()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemExtA()
</UL>

<P><STRONG><a name="[7c]"></a>INSTRUCTION::AutoHome()</STRONG> (Thumb, 570 bytes, Stack size 40 bytes, instruction.o(i._ZN11INSTRUCTION8AutoHomeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = INSTRUCTION::AutoHome() &rArr; INSTRUCTION::PrintNum(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::HangUpConsole()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusLeveling()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::WaitForHoming(unsigned)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointM()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointD()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointC()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointB()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointA()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::AutoHoming()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::PrintNum(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[89]"></a>INSTRUCTION::GetStaBP()</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION8GetStaBPEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = INSTRUCTION::GetStaBP() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[8a]"></a>INSTRUCTION::GetTemBP()</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION8GetTemBPEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::GetTemBP() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[8b]"></a>INSTRUCTION::NotFound()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION8NotFoundEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = INSTRUCTION::NotFound() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[88]"></a>INSTRUCTION::PrintNum(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION8PrintNumEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::PrintNum(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
</UL>

<P><STRONG><a name="[8c]"></a>INSTRUCTION::SetTemBP()</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION8SetTemBPEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::SetTemBP() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureBPSetting(unsigned short)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::GetNumber(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[8e]"></a>INSTRUCTION::GetTemBPS()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION9GetTemBPSEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::GetTemBPS() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[8f]"></a>INSTRUCTION::GetTemEAS()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION9GetTemEASEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::GetTemEAS() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[90]"></a>INSTRUCTION::GetTemEBS()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION9GetTemEBSEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::GetTemEBS() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[91]"></a>INSTRUCTION::GetTemEnv()</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION9GetTemEnvEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::GetTemEnv() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[95]"></a>CBUS::WaitForReceive(unsigned)</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, cbus.o(i._ZN4CBUS14WaitForReceiveEj))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
</UL>

<P><STRONG><a name="[a4]"></a>CBUS::TestIfVerifyError()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cbus.o(i._ZN4CBUS17TestIfVerifyErrorEv))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusLeveling()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointM()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointD()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointC()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointB()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointA()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEnvironment()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderB()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderA()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEBSetting()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEASetting()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBasePlane()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBPSetting()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderB()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderA()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerBasePlane()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderB()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderA()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusExtruderB()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusExtruderA()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusBasePlane()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Rest()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Rest()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Max()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Max()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusStepper()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZMax()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionYMax()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionXMax()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusHomed()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusIDP()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZ()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionY()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionX()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionB()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionA()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusFA()
</UL>

<P><STRONG><a name="[93]"></a>CBUS::Tx(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cbus.o(i._ZN4CBUS2TxEh))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Print(char*)
</UL>

<P><STRONG><a name="[e4]"></a>CBUS::Init()</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, cbus.o(i._ZN4CBUS4InitEv))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[92]"></a>CBUS::Print(char*)</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, cbus.o(i._ZN4CBUS5PrintEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Tx(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
</UL>

<P><STRONG><a name="[94]"></a>CBUS::Transmit(char, char*, unsigned)</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, cbus.o(i._ZN4CBUS8TransmitEcPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Print(char*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Tx(unsigned char)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::WaitForReceive(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEBSetting(unsigned short)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEASetting(unsigned short)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureBPSetting(unsigned short)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderB(unsigned char)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderA(unsigned char)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusLeveling()
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointM()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointD()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointC()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointB()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointA()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::AutoHoming()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::TestLink()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEnvironment()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderB()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderA()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEBSetting()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEASetting()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBasePlane()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBPSetting()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderB()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderA()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerBasePlane()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderB()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderA()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusExtruderB()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusExtruderA()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusBasePlane()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Rest()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Rest()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::TestLink()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Max()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Max()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusStepper()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZMax()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionYMax()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionXMax()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusHomed()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusIDP()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZ()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionY()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionX()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionB()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionA()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusFA()
</UL>

<P><STRONG><a name="[a2]"></a>CBUS::TestReply(char)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, cbus.o(i._ZN4CBUS9TestReplyEc))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEBSetting(unsigned short)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEASetting(unsigned short)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureBPSetting(unsigned short)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderB(unsigned char)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderA(unsigned char)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusLeveling()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::WaitForHoming(unsigned)
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointM()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointD()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointC()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointB()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointA()
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::AutoHoming()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::TestLink()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEnvironment()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderB()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderA()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEBSetting()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEASetting()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBasePlane()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBPSetting()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderB()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderA()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerBasePlane()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderB()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderA()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusExtruderB()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusExtruderA()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusBasePlane()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Rest()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Rest()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::TestLink()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Max()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Max()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusStepper()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZMax()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionYMax()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionXMax()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusHomed()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusIDP()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZ()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionY()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionX()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionB()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionA()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusFA()
</UL>

<P><STRONG><a name="[99]"></a>IBUS::WaitForReceive(unsigned)</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, ibus.o(i._ZN4IBUS14WaitForReceiveEj))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
</UL>

<P><STRONG><a name="[9c]"></a>IBUS::TestIfVerifyError()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ibus.o(i._ZN4IBUS17TestIfVerifyErrorEv))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ExpandDictionary(char*)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::HangUpConsole()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::SetInfoScreen()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::GetCommand()
</UL>

<P><STRONG><a name="[97]"></a>IBUS::Tx(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ibus.o(i._ZN4IBUS2TxEh))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Print(char*)
</UL>

<P><STRONG><a name="[e5]"></a>IBUS::Init()</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, ibus.o(i._ZN4IBUS4InitEv))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>IBUS::Print(char*)</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, ibus.o(i._ZN4IBUS5PrintEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Tx(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
</UL>

<P><STRONG><a name="[98]"></a>IBUS::Transmit(char, char*, unsigned)</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, ibus.o(i._ZN4IBUS8TransmitEcPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Print(char*)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Tx(unsigned char)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::WaitForReceive(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ExpandDictionary(char*)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::HangUpConsole()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::TestLink()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::SetInfoScreen()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::GetCommand()
</UL>

<P><STRONG><a name="[9b]"></a>IBUS::TestReply(char)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ibus.o(i._ZN4IBUS9TestReplyEc))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ExpandDictionary(char*)
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::HangUpConsole()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::TestLink()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::SetInfoScreen()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::GetCommand()
</UL>

<P><STRONG><a name="[9a]"></a>CCONI::GetCommand()</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, cconi.o(i._ZN5CCONI10GetCommandEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CCONI::GetCommand() &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Flush()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::ConsoleGetCommand()
</UL>

<P><STRONG><a name="[7f]"></a>CCONI::HangUpConsole()</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, cconi.o(i._ZN5CCONI13HangUpConsoleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CCONI::HangUpConsole() &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
</UL>

<P><STRONG><a name="[9e]"></a>CCONI::SetInfoScreen()</STRONG> (Thumb, 608 bytes, Stack size 112 bytes, cconi.o(i._ZN5CCONI13SetInfoScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = CCONI::SetInfoScreen() &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::Num2Chr(unsigned, char*)
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::InfoLCDRefreash()
</UL>

<P><STRONG><a name="[56]"></a>CCONI::ConsoleDisplay(char*, bool)</STRONG> (Thumb, 234 bytes, Stack size 288 bytes, cconi.o(i._ZN5CCONI14ConsoleDisplayEPcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::PrintNum(unsigned)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemEnv()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemEBS()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemEAS()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemBPS()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemBP()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::NotFound()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemBP()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetStaBP()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::RefreshDict()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetColPowEB()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetColPowEA()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtB()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtA()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtB()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtA()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemExtB()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemExtA()
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetStaExtB()
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetStaExtA()
</UL>

<P><STRONG><a name="[a0]"></a>CCONI::ExpandDictionary(char*)</STRONG> (Thumb, 192 bytes, Stack size 280 bytes, cconi.o(i._ZN5CCONI16ExpandDictionaryEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CCONI::ExpandDictionary(char*) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::DictInit()
</UL>

<P><STRONG><a name="[9f]"></a>CCONI::Num2Chr(unsigned, char*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cconi.o(i._ZN5CCONI7Num2ChrEjPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CCONI::Num2Chr(unsigned, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::SetInfoScreen()
</UL>

<P><STRONG><a name="[a1]"></a>CCONI::TestLink()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, cconi.o(i._ZN5CCONI8TestLinkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CCONI::TestLink() &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::ConsoleGetCommand()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::InfoLCDRefreash()
</UL>

<P><STRONG><a name="[7d]"></a>SCONI::AutoHoming()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sconi.o(i._ZN5SCONI10AutoHomingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCONI::AutoHoming() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
</UL>

<P><STRONG><a name="[a3]"></a>SCONI::GetStatusFA()</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, sconi.o(i._ZN5SCONI11GetStatusFAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCONI::GetStatusFA() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[a5]"></a>SCONI::GetPositionA()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI12GetPositionAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetPositionA() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[a7]"></a>SCONI::GetPositionB()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI12GetPositionBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetPositionB() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[a8]"></a>SCONI::GetPositionX()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI12GetPositionXEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetPositionX() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[a9]"></a>SCONI::GetPositionY()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI12GetPositionYEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetPositionY() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[aa]"></a>SCONI::GetPositionZ()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI12GetPositionZEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetPositionZ() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[ab]"></a>SCONI::GetStatusIDP()</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sconi.o(i._ZN5SCONI12GetStatusIDPEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCONI::GetStatusIDP() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[80]"></a>SCONI::GetTestPointA()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI13GetTestPointAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetTestPointA() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
</UL>

<P><STRONG><a name="[81]"></a>SCONI::GetTestPointB()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI13GetTestPointBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetTestPointB() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
</UL>

<P><STRONG><a name="[82]"></a>SCONI::GetTestPointC()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI13GetTestPointCEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetTestPointC() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
</UL>

<P><STRONG><a name="[83]"></a>SCONI::GetTestPointD()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI13GetTestPointDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetTestPointD() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
</UL>

<P><STRONG><a name="[84]"></a>SCONI::GetTestPointM()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI13GetTestPointMEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetTestPointM() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
</UL>

<P><STRONG><a name="[7e]"></a>SCONI::WaitForHoming(unsigned)</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, sconi.o(i._ZN5SCONI13WaitForHomingEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCONI::WaitForHoming(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
</UL>

<P><STRONG><a name="[ac]"></a>SCONI::GetStatusHomed()</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sconi.o(i._ZN5SCONI14GetStatusHomedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCONI::GetStatusHomed() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[ad]"></a>SCONI::GetPositionXMax()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI15GetPositionXMaxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetPositionXMax() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[ae]"></a>SCONI::GetPositionYMax()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI15GetPositionYMaxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetPositionYMax() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[af]"></a>SCONI::GetPositionZMax()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI15GetPositionZMaxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetPositionZMax() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[b0]"></a>SCONI::GetStatusStepper()</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sconi.o(i._ZN5SCONI16GetStatusStepperEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCONI::GetStatusStepper() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[85]"></a>SCONI::GetStatusLeveling()</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sconi.o(i._ZN5SCONI17GetStatusLevelingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCONI::GetStatusLeveling() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
</UL>

<P><STRONG><a name="[a6]"></a>SCONI::Chr2Flo(char*, unsigned, unsigned, bool)</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, sconi.o(i._ZN5SCONI7Chr2FloEPcjjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointM()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointD()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointC()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointB()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointA()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Rest()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Rest()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Max()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Max()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZMax()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionYMax()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionXMax()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZ()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionY()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionX()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionB()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionA()
</UL>

<P><STRONG><a name="[b4]"></a>SCONI::GetL1Max()</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, sconi.o(i._ZN5SCONI8GetL1MaxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SCONI::GetL1Max() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[b5]"></a>SCONI::GetL2Max()</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, sconi.o(i._ZN5SCONI8GetL2MaxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SCONI::GetL2Max() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[b6]"></a>SCONI::TestLink()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sconi.o(i._ZN5SCONI8TestLinkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCONI::TestLink() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[b7]"></a>SCONI::GetL1Rest()</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, sconi.o(i._ZN5SCONI9GetL1RestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SCONI::GetL1Rest() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[b8]"></a>SCONI::GetL2Rest()</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, sconi.o(i._ZN5SCONI9GetL2RestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SCONI::GetL2Rest() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[c4]"></a>SHELL::CountNumber()</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, shell.o(i._ZN5SHELL11CountNumberEv))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Identify(char**, unsigned)
</UL>

<P><STRONG><a name="[b9]"></a>SHELL::Init()</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, shell.o(i._ZN5SHELL4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SHELL::Init() &rArr; SHELL::DictInit() &rArr; CCONI::ExpandDictionary(char*) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Flush()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::RefreshDictInit()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetColPowEBInit()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetColPowEAInit()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtBInit()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtAInit()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtBInit()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtAInit()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemExtBInit()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemExtAInit()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetStaExtBInit()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetStaExtAInit()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemEnvInit()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemEBSInit()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemEASInit()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemBPSInit()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemBPInit()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemBPInit()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetStaBPInit()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHomeInit()
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::DictInit()
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9d]"></a>SHELL::Flush()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, shell.o(i._ZN5SHELL5FlushEv))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::GetCommand()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
</UL>

<P><STRONG><a name="[ba]"></a>SHELL::Slice()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, shell.o(i._ZN5SHELL5SliceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SHELL::Slice() &rArr; SHELL::AddWord(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::AddWord(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[c0]"></a>SHELL::Upper(char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, shell.o(i._ZN5SHELL5UpperEc))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Compare(char*, char*)
</UL>

<P><STRONG><a name="[69]"></a>SHELL::Expand(char*)</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, shell.o(i._ZN5SHELL6ExpandEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SHELL::Expand(char*) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Compare(char*, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::RefreshDictInit()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetColPowEBInit()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetColPowEAInit()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtBInit()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtAInit()
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtBInit()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtAInit()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemExtBInit()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemExtAInit()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetStaExtBInit()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetStaExtAInit()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemEnvInit()
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemEBSInit()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemEASInit()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemBPSInit()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemBPInit()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemBPInit()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetStaBPInit()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHomeInit()
</UL>

<P><STRONG><a name="[bd]"></a>SHELL::Search(char*, unsigned&)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, shell.o(i._ZN5SHELL6SearchEPcRj))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SHELL::Search(char*, unsigned&) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Compare(char*, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Identify(char**, unsigned)
</UL>

<P><STRONG><a name="[bb]"></a>SHELL::AddWord(char*)</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, shell.o(i._ZN5SHELL7AddWordEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SHELL::AddWord(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::IsNumber(char)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::IsLetter(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Slice()
</UL>

<P><STRONG><a name="[c5]"></a>SHELL::Chr2Num(char*)</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, shell.o(i._ZN5SHELL7Chr2NumEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SHELL::Chr2Num(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::GetNumber(unsigned)
</UL>

<P><STRONG><a name="[bc]"></a>SHELL::Compare(char*, char*)</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, shell.o(i._ZN5SHELL7CompareEPcS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Upper(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Search(char*, unsigned&)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Expand(char*)
</UL>

<P><STRONG><a name="[c1]"></a>SHELL::Decoder()</STRONG> (Thumb, 464 bytes, Stack size 8 bytes, shell.o(i._ZN5SHELL7DecoderEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = SHELL::Decoder() &rArr; INSTRUCTION::AutoHome() &rArr; INSTRUCTION::PrintNum(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Flush()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemEnv()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemEBS()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemEAS()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemBPS()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemBP()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::NotFound()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemBP()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetStaBP()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::RefreshDict()
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetColPowEB()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetColPowEA()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtB()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtA()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtB()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtA()
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemExtB()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetTemExtA()
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetStaExtB()
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::GetStaExtA()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Identify(char**, unsigned)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Slice()
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::ConsoleGetCommand()
</UL>

<P><STRONG><a name="[67]"></a>SHELL::DictInit()</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, shell.o(i._ZN5SHELL8DictInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SHELL::DictInit() &rArr; CCONI::ExpandDictionary(char*) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ExpandDictionary(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::RefreshDict()
</UL>

<P><STRONG><a name="[c2]"></a>SHELL::Identify(char**, unsigned)</STRONG> (Thumb, 178 bytes, Stack size 272 bytes, shell.o(i._ZN5SHELL8IdentifyEPPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = SHELL::Identify(char**, unsigned) &rArr; SHELL::Search(char*, unsigned&) &rArr; SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Search(char*, unsigned&)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::CountNumber()
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[be]"></a>SHELL::IsLetter(char)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, shell.o(i._ZN5SHELL8IsLetterEc))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::AddWord(char*)
</UL>

<P><STRONG><a name="[bf]"></a>SHELL::IsNumber(char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, shell.o(i._ZN5SHELL8IsNumberEc))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::AddWord(char*)
</UL>

<P><STRONG><a name="[5c]"></a>SHELL::GetNumber(unsigned)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, shell.o(i._ZN5SHELL9GetNumberEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SHELL::GetNumber(unsigned) &rArr; SHELL::Chr2Num(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Chr2Num(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemBP()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtB()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtA()
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtB()
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtA()
</UL>

<P><STRONG><a name="[c6]"></a>TCONI::GetStatusBasePlane()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tconi.o(i._ZN5TCONI18GetStatusBasePlaneEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TCONI::GetStatusBasePlane() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[c7]"></a>TCONI::GetStatusExtruderA()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tconi.o(i._ZN5TCONI18GetStatusExtruderAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TCONI::GetStatusExtruderA() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[c8]"></a>TCONI::GetStatusExtruderB()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tconi.o(i._ZN5TCONI18GetStatusExtruderBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TCONI::GetStatusExtruderB() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[c9]"></a>TCONI::GetCoolerPowerExtruderA()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetCoolerPowerExtruderAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetCoolerPowerExtruderA() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[cb]"></a>TCONI::GetCoolerPowerExtruderB()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetCoolerPowerExtruderBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetCoolerPowerExtruderB() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[cc]"></a>TCONI::GetHeaterPowerBasePlane()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetHeaterPowerBasePlaneEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetHeaterPowerBasePlane() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[cd]"></a>TCONI::GetHeaterPowerExtruderA()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetHeaterPowerExtruderAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetHeaterPowerExtruderA() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[ce]"></a>TCONI::GetHeaterPowerExtruderB()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetHeaterPowerExtruderBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetHeaterPowerExtruderB() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[cf]"></a>TCONI::GetTemperatureBPSetting()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetTemperatureBPSettingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetTemperatureBPSetting() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[d0]"></a>TCONI::GetTemperatureBasePlane()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetTemperatureBasePlaneEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetTemperatureBasePlane() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[d1]"></a>TCONI::GetTemperatureEASetting()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetTemperatureEASettingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetTemperatureEASetting() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[d2]"></a>TCONI::GetTemperatureEBSetting()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetTemperatureEBSettingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetTemperatureEBSetting() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[d3]"></a>TCONI::GetTemperatureExtruderA()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetTemperatureExtruderAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetTemperatureExtruderA() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[d4]"></a>TCONI::GetTemperatureExtruderB()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetTemperatureExtruderBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetTemperatureExtruderB() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[5d]"></a>TCONI::SetCoolerPowerExtruderA(unsigned char)</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, tconi.o(i._ZN5TCONI23SetCoolerPowerExtruderAEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TCONI::SetCoolerPowerExtruderA(unsigned char) &rArr; TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtA()
</UL>

<P><STRONG><a name="[5f]"></a>TCONI::SetCoolerPowerExtruderB(unsigned char)</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, tconi.o(i._ZN5TCONI23SetCoolerPowerExtruderBEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TCONI::SetCoolerPowerExtruderB(unsigned char) &rArr; TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtB()
</UL>

<P><STRONG><a name="[8d]"></a>TCONI::SetTemperatureBPSetting(unsigned short)</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, tconi.o(i._ZN5TCONI23SetTemperatureBPSettingEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TCONI::SetTemperatureBPSetting(unsigned short) &rArr; TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemBP()
</UL>

<P><STRONG><a name="[61]"></a>TCONI::SetTemperatureEASetting(unsigned short)</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, tconi.o(i._ZN5TCONI23SetTemperatureEASettingEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TCONI::SetTemperatureEASetting(unsigned short) &rArr; TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtA()
</UL>

<P><STRONG><a name="[63]"></a>TCONI::SetTemperatureEBSetting(unsigned short)</STRONG> (Thumb, 176 bytes, Stack size 48 bytes, tconi.o(i._ZN5TCONI23SetTemperatureEBSettingEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TCONI::SetTemperatureEBSetting(unsigned short) &rArr; TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtB()
</UL>

<P><STRONG><a name="[d7]"></a>TCONI::GetTemperatureEnvironment()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI25GetTemperatureEnvironmentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetTemperatureEnvironment() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[ca]"></a>TCONI::Chr2Flo(char*, unsigned, unsigned, bool)</STRONG> (Thumb, 238 bytes, Stack size 64 bytes, tconi.o(i._ZN5TCONI7Chr2FloEPcjjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEnvironment()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderB()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderA()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEBSetting()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEASetting()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBasePlane()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBPSetting()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderB()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderA()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerBasePlane()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderB()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderA()
</UL>

<P><STRONG><a name="[d6]"></a>TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, tconi.o(i._ZN5TCONI7Flo2ChrEPcdjjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEBSetting(unsigned short)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEASetting(unsigned short)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureBPSetting(unsigned short)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderB(unsigned char)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderA(unsigned char)
</UL>

<P><STRONG><a name="[dd]"></a>TCONI::TestLink()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tconi.o(i._ZN5TCONI8TestLinkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TCONI::TestLink() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[de]"></a>AUTOMATE::SCONGetStatus()</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, automate.o(i._ZN8AUTOMATE13SCONGetStatusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AUTOMATE::SCONGetStatus() &rArr; SCONI::GetL2Rest() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Rest()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Rest()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::TestLink()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Max()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Max()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusStepper()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZMax()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionYMax()
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionXMax()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusHomed()
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusIDP()
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZ()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionY()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionX()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionB()
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionA()
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusFA()
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Checking()
</UL>

<P><STRONG><a name="[df]"></a>AUTOMATE::TCONGetStatus()</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, automate.o(i._ZN8AUTOMATE13TCONGetStatusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AUTOMATE::TCONGetStatus() &rArr; TCONI::GetTemperatureEnvironment() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::TestLink()
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEnvironment()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderB()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderA()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEBSetting()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEASetting()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBasePlane()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBPSetting()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderB()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderA()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerBasePlane()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderB()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderA()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusExtruderB()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusExtruderA()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusBasePlane()
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Checking()
</UL>

<P><STRONG><a name="[e0]"></a>AUTOMATE::InfoLCDRefreash()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, automate.o(i._ZN8AUTOMATE15InfoLCDRefreashEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = AUTOMATE::InfoLCDRefreash() &rArr; CCONI::SetInfoScreen() &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::TestLink()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::SetInfoScreen()
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Checking()
</UL>

<P><STRONG><a name="[e1]"></a>AUTOMATE::ConsoleGetCommand()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, automate.o(i._ZN8AUTOMATE17ConsoleGetCommandEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = AUTOMATE::ConsoleGetCommand() &rArr; SHELL::Decoder() &rArr; INSTRUCTION::AutoHome() &rArr; INSTRUCTION::PrintNum(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::TestLink()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::GetCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Checking()
</UL>

<P><STRONG><a name="[53]"></a>AUTOMATE::SCONGetStatusCount()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, automate.o(i._ZN8AUTOMATE18SCONGetStatusCountEv))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>AUTOMATE::TCONGetStatusCount()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, automate.o(i._ZN8AUTOMATE18TCONGetStatusCountEv))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[51]"></a>AUTOMATE::InfoLCDRefreashCount()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, automate.o(i._ZN8AUTOMATE20InfoLCDRefreashCountEv))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[54]"></a>AUTOMATE::ConsoleGetCommandCount()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, automate.o(i._ZN8AUTOMATE22ConsoleGetCommandCountEv))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>AUTOMATE::Init()</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, automate.o(i._ZN8AUTOMATE4InitEv))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e2]"></a>AUTOMATE::Checking()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, automate.o(i._ZN8AUTOMATE8CheckingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = AUTOMATE::Checking() &rArr; AUTOMATE::ConsoleGetCommand() &rArr; SHELL::Decoder() &rArr; INSTRUCTION::AutoHome() &rArr; INSTRUCTION::PrintNum(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::ConsoleGetCommand()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::InfoLCDRefreash()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>main</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = main &rArr; AUTOMATE::Checking() &rArr; AUTOMATE::ConsoleGetCommand() &rArr; SHELL::Decoder() &rArr; INSTRUCTION::AutoHome() &rArr; INSTRUCTION::PrintNum(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Checking()
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Init()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Init()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Init()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b2]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
</UL>

<P><STRONG><a name="[e7]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[ee]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
</UL>

<P><STRONG><a name="[eb]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEnvironment()
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderB()
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderA()
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEBSetting()
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEASetting()
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBasePlane()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBPSetting()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderB()
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderA()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerBasePlane()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderB()
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderA()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Rest()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Rest()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Max()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Max()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::SetInfoScreen()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
</UL>

<P><STRONG><a name="[ec]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[b1]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
</UL>

<P><STRONG><a name="[126]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[dc]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
</UL>

<P><STRONG><a name="[127]"></a>_ll_sto_d</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)

<P><STRONG><a name="[d5]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEBSetting(unsigned short)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEASetting(unsigned short)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureBPSetting(unsigned short)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderB(unsigned char)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderA(unsigned char)
</UL>

<P><STRONG><a name="[128]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[d9]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
</UL>

<P><STRONG><a name="[ed]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[f1]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[86]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
</UL>

<P><STRONG><a name="[ef]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ea]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[e9]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
</UL>

<P><STRONG><a name="[f0]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[f2]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[da]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
</UL>

<P><STRONG><a name="[f4]"></a>_ll_sfrom_d</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4f]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[50]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[f3]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[e8]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
