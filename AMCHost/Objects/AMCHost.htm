<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\AMCHost.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\AMCHost.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Mon Jun 24 01:13:44 2019
<BR><P>
<H3>Maximum Stack Usage =        448 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; AUTOMATE::Checking(unsigned char) &rArr; AUTOMATE::ConsoleGetCommand() &rArr; SHELL::Decoder() &rArr; INSTRUCTION::ErrorInfo() &rArr; INSTRUCTION::PrintNum(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[4d]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[5]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">NMI_Handler</a><BR>
 <LI><a href="#[6]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">HardFault_Handler</a><BR>
 <LI><a href="#[7]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">MemManage_Handler</a><BR>
 <LI><a href="#[8]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">BusFault_Handler</a><BR>
 <LI><a href="#[9]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">UsageFault_Handler</a><BR>
 <LI><a href="#[a]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">SVC_Handler</a><BR>
 <LI><a href="#[b]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">DebugMon_Handler</a><BR>
 <LI><a href="#[c]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">PendSV_Handler</a><BR>
 <LI><a href="#[d]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">SysTick_Handler</a><BR>
 <LI><a href="#[20]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[9d]">INSTRUCTION::MoveAxisZ(unsigned)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">AUTOMATE::Checking(unsigned char)</a><BR>
 <LI><a href="#[9c]">INSTRUCTION::MoveAxisY(unsigned)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">AUTOMATE::Checking(unsigned char)</a><BR>
 <LI><a href="#[99]">INSTRUCTION::MoveAxisX(unsigned)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">AUTOMATE::Checking(unsigned char)</a><BR>
 <LI><a href="#[88]">INSTRUCTION::AutoHome()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">AUTOMATE::Checking(unsigned char)</a><BR>
 <LI><a href="#[74]">INSTRUCTION::DisableNozzleB()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">AUTOMATE::Checking(unsigned char)</a><BR>
 <LI><a href="#[73]">INSTRUCTION::DisableNozzleA()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">AUTOMATE::Checking(unsigned char)</a><BR>
 <LI><a href="#[70]">INSTRUCTION::EnableNozzleB()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">AUTOMATE::Checking(unsigned char)</a><BR>
 <LI><a href="#[6b]">INSTRUCTION::EnableNozzleA()</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e]">AUTOMATE::Checking(unsigned char)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[20]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c]">PendSV_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">SysTick_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[39]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[10]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">TIM3_IRQHandler</a> from automate.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">USART1_IRQHandler</a> from abus.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USART2_IRQHandler</a> from ibus.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">USART3_IRQHandler</a> from cbus.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[38]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3b]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3c]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[3e]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[150]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[151]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[152]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[153]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[154]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[42]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[155]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[156]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[157]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[158]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[159]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[15a]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[15b]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[15c]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[15d]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[15e]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[15f]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[160]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[161]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[162]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[163]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[164]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[165]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[166]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[167]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[168]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[169]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[47]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[16a]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[16b]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[16c]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[16d]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[16e]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[16f]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[170]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[3d]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[171]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[3f]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[41]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[172]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[43]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 448 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; AUTOMATE::Checking(unsigned char) &rArr; AUTOMATE::ConsoleGetCommand() &rArr; SHELL::Decoder() &rArr; INSTRUCTION::ErrorInfo() &rArr; INSTRUCTION::PrintNum(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[173]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[4e]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[46]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[174]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[48]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[175]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
</UL>

<P><STRONG><a name="[4a]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::CharToNumber(unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[177]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::FileTest()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileTotalDistance()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileCommandNumber()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileEstimateTime()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetTotalVolume()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFilePointer()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetRestVolume()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo6()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo5()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo4()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo3()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo2()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo1()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileSize()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileName()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::SetStatusBar()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Round()
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::ErrorInfo()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::GetNumber(char*, unsigned&)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Match(char*, char*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::FileOpen()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::FileReadLine(unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[179]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[17a]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[17c]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[45]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[17f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[180]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[181]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[182]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[2b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, automate.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM3_IRQHandler &rArr; AUTOMATE::ClickCount()
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::ConsoleGetCommandCount()
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::InterpreterRoundCount()
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::InfoLCDRefreashCount()
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatusCount()
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatusCount()
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::FCONGetStatusCount()
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::AUX1GetStatusCount()
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::RTCGetStatusCount()
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::ClickCount()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART1_IRQHandler</STRONG> (Thumb, 146 bytes, Stack size 0 bytes, abus.o(i.USART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART2_IRQHandler</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, ibus.o(i.USART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART3_IRQHandler</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, cbus.o(i.USART3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11b]"></a>IIC_GetSDA()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtclock.o(i._Z10IIC_GetSDAv))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_ReadByte(bool)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_WaitAck()
</UL>

<P><STRONG><a name="[119]"></a>IIC_SCL(bool)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtclock.o(i._Z7IIC_SCLb))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_Start()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_Stop()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_NAck()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_Init()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_Ack()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_SendByte(unsigned char)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_ReadByte(bool)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_WaitAck()
</UL>

<P><STRONG><a name="[117]"></a>IIC_SDA(bool)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, rtclock.o(i._Z7IIC_SDAb))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_Start()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_Stop()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_NAck()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_Init()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_Ack()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_SendByte(unsigned char)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_ReadByte(bool)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_WaitAck()
</UL>

<P><STRONG><a name="[133]"></a>Delay_Ms(unsigned)</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, main.o(i._Z8Delay_Msj))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5a]"></a>INSTRUCTION::DisableIDP()</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION10DisableIDPEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::DisableIDP() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::DisableIDP()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[5d]"></a>INSTRUCTION::SetColExtA(unsigned)</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, instruction.o(i._ZN11INSTRUCTION10SetColExtAEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = INSTRUCTION::SetColExtA(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderA(unsigned char)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[60]"></a>INSTRUCTION::SetColExtB(unsigned)</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, instruction.o(i._ZN11INSTRUCTION10SetColExtBEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = INSTRUCTION::SetColExtB(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderB(unsigned char)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[62]"></a>INSTRUCTION::SetTemExtA(unsigned)</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, instruction.o(i._ZN11INSTRUCTION10SetTemExtAEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = INSTRUCTION::SetTemExtA(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEASetting(unsigned short)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[64]"></a>INSTRUCTION::SetTemExtB(unsigned)</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, instruction.o(i._ZN11INSTRUCTION10SetTemExtBEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = INSTRUCTION::SetTemExtB(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEBSetting(unsigned short)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[66]"></a>INSTRUCTION::RefreshDict()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION11RefreshDictEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = INSTRUCTION::RefreshDict() &rArr; SHELL::DictInit() &rArr; CCONI::ExpandDictionary(char*) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::DictInit()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[68]"></a>INSTRUCTION::StorageInfo()</STRONG> (Thumb, 378 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION11StorageInfoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = INSTRUCTION::StorageInfo() &rArr; INSTRUCTION::PrintNum(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::PrintNum(unsigned)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[6a]"></a>INSTRUCTION::WarningInfo()</STRONG> (Thumb, 408 bytes, Stack size 24 bytes, instruction.o(i._ZN11INSTRUCTION11WarningInfoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = INSTRUCTION::WarningInfo() &rArr; INSTRUCTION::PrintNum(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::PrintNum(unsigned)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[6b]"></a>INSTRUCTION::EnableNozzleA()</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, instruction.o(i._ZN11INSTRUCTION13EnableNozzleAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + In Cycle
<LI>Call Chain = INSTRUCTION::EnableNozzleA() &rArr;  AUTOMATE::Checking(unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::SetNozzleState(unsigned char, unsigned char)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusBusy()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Checking(unsigned char)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::HangUpConsole()
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[70]"></a>INSTRUCTION::EnableNozzleB()</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, instruction.o(i._ZN11INSTRUCTION13EnableNozzleBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + In Cycle
<LI>Call Chain = INSTRUCTION::EnableNozzleB() &rArr;  AUTOMATE::Checking(unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::SetNozzleState(unsigned char, unsigned char)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusBusy()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Checking(unsigned char)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::HangUpConsole()
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[71]"></a>INSTRUCTION::EnableStepper()</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION13EnableStepperEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::EnableStepper() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::EnableStepper()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[73]"></a>INSTRUCTION::DisableNozzleA()</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, instruction.o(i._ZN11INSTRUCTION14DisableNozzleAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + In Cycle
<LI>Call Chain = INSTRUCTION::DisableNozzleA() &rArr;  AUTOMATE::Checking(unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::SetNozzleState(unsigned char, unsigned char)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusBusy()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Checking(unsigned char)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::HangUpConsole()
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[74]"></a>INSTRUCTION::DisableNozzleB()</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, instruction.o(i._ZN11INSTRUCTION14DisableNozzleBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + In Cycle
<LI>Call Chain = INSTRUCTION::DisableNozzleB() &rArr;  AUTOMATE::Checking(unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::SetNozzleState(unsigned char, unsigned char)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusBusy()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Checking(unsigned char)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::HangUpConsole()
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[75]"></a>INSTRUCTION::ReloadFilament()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION14ReloadFilamentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::ReloadFilament() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::ReLoad()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[77]"></a>INSTRUCTION::EnableMainLight()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION15EnableMainLightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::EnableMainLight() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::TestLink()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::SetStatusMainLight(bool)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[7a]"></a>INSTRUCTION::DisableMainLight()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION16DisableMainLightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::DisableMainLight() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::TestLink()
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::SetStatusMainLight(bool)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[7b]"></a>INSTRUCTION::ManufacturingInfo()</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION17ManufacturingInfoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = INSTRUCTION::ManufacturingInfo() &rArr; INSTRUCTION::PrintNum(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::PrintNum(unsigned)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[7c]"></a>INSTRUCTION::StopManufacturing()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION17StopManufacturingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::StopManufacturing() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Stop()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[7e]"></a>INSTRUCTION::PauseManufacturing()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION18PauseManufacturingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::PauseManufacturing() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Pause()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[80]"></a>INSTRUCTION::StartManufacturing()</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION18StartManufacturingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::StartManufacturing() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Start()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[82]"></a>INSTRUCTION::ManufacturingReport()</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION19ManufacturingReportEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = INSTRUCTION::ManufacturingReport() &rArr; INSTRUCTION::PrintNum(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::PrintNum(unsigned)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[83]"></a>INSTRUCTION::ResumeManufacturing()</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION19ResumeManufacturingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::ResumeManufacturing() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Resume()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[85]"></a>INSTRUCTION::EnableAuxiliaryLight()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION20EnableAuxiliaryLightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::EnableAuxiliaryLight() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::TestLink()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::SetStatusAuxiliaryLight(bool)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[87]"></a>INSTRUCTION::DisableAuxiliaryLight()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION21DisableAuxiliaryLightEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::DisableAuxiliaryLight() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::TestLink()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::SetStatusAuxiliaryLight(bool)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[5f]"></a>INSTRUCTION::Num2Chr(char*, unsigned)</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, instruction.o(i._ZN11INSTRUCTION7Num2ChrEPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = INSTRUCTION::Num2Chr(char*, unsigned) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::PrintNum(unsigned)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemBP(unsigned)
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtB(unsigned)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtA(unsigned)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtB(unsigned)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtA(unsigned)
</UL>

<P><STRONG><a name="[88]"></a>INSTRUCTION::AutoHome()</STRONG> (Thumb, 720 bytes, Stack size 48 bytes, instruction.o(i._ZN11INSTRUCTION8AutoHomeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 384 + In Cycle
<LI>Call Chain = INSTRUCTION::AutoHome() &rArr;  AUTOMATE::Checking(unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusLeveling()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointM()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointD()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointC()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointB()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointA()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusBusy()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::AutoHoming()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Checking(unsigned char)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::PrintNum(unsigned)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::HangUpConsole()
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[92]"></a>INSTRUCTION::NotFound()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, instruction.o(i._ZN11INSTRUCTION8NotFoundEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = INSTRUCTION::NotFound() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[69]"></a>INSTRUCTION::PrintNum(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION8PrintNumEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::PrintNum(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::ErrorInfo()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::ManufacturingReport()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::ManufacturingInfo()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::WarningInfo()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::StorageInfo()
</UL>

<P><STRONG><a name="[93]"></a>INSTRUCTION::SetTemBP(unsigned)</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, instruction.o(i._ZN11INSTRUCTION8SetTemBPEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = INSTRUCTION::SetTemBP(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureBPSetting(unsigned short)
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::Num2Chr(char*, unsigned)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[95]"></a>INSTRUCTION::EnableIDP()</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, instruction.o(i._ZN11INSTRUCTION9EnableIDPEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = INSTRUCTION::EnableIDP() &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::EnableIDP()
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[97]"></a>INSTRUCTION::ErrorInfo()</STRONG> (Thumb, 788 bytes, Stack size 72 bytes, instruction.o(i._ZN11INSTRUCTION9ErrorInfoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = INSTRUCTION::ErrorInfo() &rArr; INSTRUCTION::PrintNum(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::PrintNum(unsigned)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[99]"></a>INSTRUCTION::MoveAxisX(unsigned)</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, instruction.o(i._ZN11INSTRUCTION9MoveAxisXEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + In Cycle
<LI>Call Chain = INSTRUCTION::MoveAxisX(unsigned) &rArr;  AUTOMATE::Checking(unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::MoveAxis(double, unsigned char)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusBusy()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Checking(unsigned char)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::HangUpConsole()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[9c]"></a>INSTRUCTION::MoveAxisY(unsigned)</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, instruction.o(i._ZN11INSTRUCTION9MoveAxisYEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + In Cycle
<LI>Call Chain = INSTRUCTION::MoveAxisY(unsigned) &rArr;  AUTOMATE::Checking(unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::MoveAxis(double, unsigned char)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusBusy()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Checking(unsigned char)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::HangUpConsole()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[9d]"></a>INSTRUCTION::MoveAxisZ(unsigned)</STRONG> (Thumb, 376 bytes, Stack size 32 bytes, instruction.o(i._ZN11INSTRUCTION9MoveAxisZEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + In Cycle
<LI>Call Chain = INSTRUCTION::MoveAxisZ(unsigned) &rArr;  AUTOMATE::Checking(unsigned char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::MoveAxis(double, unsigned char)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusBusy()
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Checking(unsigned char)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::HangUpConsole()
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[ab]"></a>INTERPRETER::AbsDecimal(int)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, interpreter.o(i._ZN11INTERPRETER10AbsDecimalEi))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::GetInstruction()
</UL>

<P><STRONG><a name="[9e]"></a>INTERPRETER::StatusCheck()</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, interpreter.o(i._ZN11INTERPRETER11StatusCheckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = INTERPRETER::StatusCheck() &rArr; AUXIO::GetStatusMaterialB() &rArr; ABUS::Transmit(char, char*, unsigned) &rArr; ABUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::GetStatusMaterialB()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::GetStatusMaterialA()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Round()
</UL>

<P><STRONG><a name="[a1]"></a>INTERPRETER::CharToDouble(unsigned char*)</STRONG> (Thumb, 288 bytes, Stack size 72 bytes, interpreter.o(i._ZN11INTERPRETER12CharToDoubleEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = INTERPRETER::CharToDouble(unsigned char*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::GetInstruction()
</UL>

<P><STRONG><a name="[a4]"></a>INTERPRETER::LocalAnalyse()</STRONG> (Thumb, 7254 bytes, Stack size 24 bytes, interpreter.o(i._ZN11INTERPRETER12LocalAnalyseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = INTERPRETER::LocalAnalyse() &rArr; __aeabi_cfcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Round()
</UL>

<P><STRONG><a name="[aa]"></a>INTERPRETER::CharToDecimal(unsigned char*)</STRONG> (Thumb, 122 bytes, Stack size 28 bytes, interpreter.o(i._ZN11INTERPRETER13CharToDecimalEPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = INTERPRETER::CharToDecimal(unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::GetInstruction()
</UL>

<P><STRONG><a name="[a7]"></a>INTERPRETER::GetInstruction()</STRONG> (Thumb, 1180 bytes, Stack size 24 bytes, interpreter.o(i._ZN11INTERPRETER14GetInstructionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = INTERPRETER::GetInstruction() &rArr; FCONI::GetFilePointer() &rArr; FCONI::CharToNumber(unsigned char, unsigned char*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFilePointer()
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::AxisRound(double&, double)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::CharToDecimal(unsigned char*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::CharToDouble(unsigned char*)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::AbsDecimal(int)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::FileReadLine(unsigned char, unsigned char*)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Round()
</UL>

<P><STRONG><a name="[138]"></a>INTERPRETER::Init()</STRONG> (Thumb, 378 bytes, Stack size 16 bytes, interpreter.o(i._ZN11INTERPRETER4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = INTERPRETER::Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>INTERPRETER::Stop()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, interpreter.o(i._ZN11INTERPRETER4StopEv))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::StopManufacturing()
</UL>

<P><STRONG><a name="[12a]"></a>INTERPRETER::Tick()</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, interpreter.o(i._ZN11INTERPRETER4TickEv))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::ClickCount()
</UL>

<P><STRONG><a name="[7f]"></a>INTERPRETER::Pause()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, interpreter.o(i._ZN11INTERPRETER5PauseEv))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::PauseManufacturing()
</UL>

<P><STRONG><a name="[b8]"></a>INTERPRETER::Reset()</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, interpreter.o(i._ZN11INTERPRETER5ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = INTERPRETER::Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Round()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Start()
</UL>

<P><STRONG><a name="[ae]"></a>INTERPRETER::Round()</STRONG> (Thumb, 2126 bytes, Stack size 72 bytes, interpreter.o(i._ZN11INTERPRETER5RoundEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = INTERPRETER::Round() &rArr; INTERPRETER::Process() &rArr; SCONI::Motion(double*, float) &rArr; SCONI::Flo2Chr(char*, double, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Motion(double*, float)
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZ()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionY()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionX()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionB()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionA()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusFA()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Reset()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::GetInstruction()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::LocalAnalyse()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::StatusCheck()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::InterpreterRound()
</UL>

<P><STRONG><a name="[81]"></a>INTERPRETER::Start()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, interpreter.o(i._ZN11INTERPRETER5StartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = INTERPRETER::Start() &rArr; INTERPRETER::PreCheck() &rArr; SCONI::GetPositionZ() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::PreCheck()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::StartManufacturing()
</UL>

<P><STRONG><a name="[76]"></a>INTERPRETER::ReLoad()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, interpreter.o(i._ZN11INTERPRETER6ReLoadEv))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::ReloadFilament()
</UL>

<P><STRONG><a name="[84]"></a>INTERPRETER::Resume()</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, interpreter.o(i._ZN11INTERPRETER6ResumeEv))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::ResumeManufacturing()
</UL>

<P><STRONG><a name="[af]"></a>INTERPRETER::Process()</STRONG> (Thumb, 2968 bytes, Stack size 64 bytes, interpreter.o(i._ZN11INTERPRETER7ProcessEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = INTERPRETER::Process() &rArr; SCONI::Motion(double*, float) &rArr; SCONI::Flo2Chr(char*, double, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEBSetting(unsigned short)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEASetting(unsigned short)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureBPSetting(unsigned short)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderB(unsigned char)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderA(unsigned char)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Motion(double*, float)
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::SetNozzleState(unsigned char, unsigned char)
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusBusy()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::SetPosition(double, char)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderB()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderA()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEBSetting()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEASetting()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBasePlane()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBPSetting()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusExtruderB()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusExtruderA()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusBasePlane()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZ()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionY()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionX()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionB()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionA()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusFA()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Round()
</UL>

<P><STRONG><a name="[b9]"></a>INTERPRETER::PreCheck()</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, interpreter.o(i._ZN11INTERPRETER8PreCheckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = INTERPRETER::PreCheck() &rArr; SCONI::GetPositionZ() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::TestLink()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::TestLink()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusHomed()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZ()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionY()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionX()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionB()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionA()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::TestLink()
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::TestLink()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::FileOpen()
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Start()
</UL>

<P><STRONG><a name="[ac]"></a>INTERPRETER::AxisRound(double&, double)</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, interpreter.o(i._ZN11INTERPRETER9AxisRoundERdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = INTERPRETER::AxisRound(double&, double) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::GetInstruction()
</UL>

<P><STRONG><a name="[cf]"></a>ABUS::WaitForReceive(unsigned)</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, abus.o(i._ZN4ABUS14WaitForReceiveEj))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::Transmit(char, char*, unsigned)
</UL>

<P><STRONG><a name="[d9]"></a>ABUS::TestIfVerifyError()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, abus.o(i._ZN4ABUS17TestIfVerifyErrorEv))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::GetStatusMaterialB()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::GetStatusMaterialA()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::SetStatusAuxiliaryLight(bool)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::SetStatusMainLight(bool)
</UL>

<P><STRONG><a name="[cd]"></a>ABUS::Tx(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, abus.o(i._ZN4ABUS2TxEh))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::Transmit(char, char*, unsigned)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::Print(char*)
</UL>

<P><STRONG><a name="[136]"></a>ABUS::Init()</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, abus.o(i._ZN4ABUS4InitEv))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>ABUS::Print(char*)</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, abus.o(i._ZN4ABUS5PrintEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ABUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::Tx(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::Transmit(char, char*, unsigned)
</UL>

<P><STRONG><a name="[ce]"></a>ABUS::Transmit(char, char*, unsigned)</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, abus.o(i._ZN4ABUS8TransmitEcPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ABUS::Transmit(char, char*, unsigned) &rArr; ABUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::Print(char*)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::Tx(unsigned char)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::WaitForReceive(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::TestLink()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::GetStatusMaterialB()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::GetStatusMaterialA()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::SetStatusAuxiliaryLight(bool)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::SetStatusMainLight(bool)
</UL>

<P><STRONG><a name="[d8]"></a>ABUS::TestReply(char)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, abus.o(i._ZN4ABUS9TestReplyEc))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::TestLink()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::GetStatusMaterialB()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::GetStatusMaterialA()
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::SetStatusAuxiliaryLight(bool)
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::SetStatusMainLight(bool)
</UL>

<P><STRONG><a name="[d3]"></a>CBUS::WaitForReceive(unsigned)</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, cbus.o(i._ZN4CBUS14WaitForReceiveEj))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
</UL>

<P><STRONG><a name="[f4]"></a>CBUS::TestIfVerifyError()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cbus.o(i._ZN4CBUS17TestIfVerifyErrorEv))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusLeveling()
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointM()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointD()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointC()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointB()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointA()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusBusy()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEnvironment()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderB()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderA()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEBSetting()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEASetting()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBasePlane()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBPSetting()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderB()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderA()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerBasePlane()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderB()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderA()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusExtruderB()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusExtruderA()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusBasePlane()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Rest()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Rest()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Max()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Max()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusStepper()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZMax()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionYMax()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionXMax()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusHomed()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusIDP()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZ()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionY()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionX()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionB()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionA()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusFA()
</UL>

<P><STRONG><a name="[d1]"></a>CBUS::Tx(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cbus.o(i._ZN4CBUS2TxEh))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Print(char*)
</UL>

<P><STRONG><a name="[134]"></a>CBUS::Init()</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, cbus.o(i._ZN4CBUS4InitEv))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>CBUS::Print(char*)</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, cbus.o(i._ZN4CBUS5PrintEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Tx(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
</UL>

<P><STRONG><a name="[d2]"></a>CBUS::Transmit(char, char*, unsigned)</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, cbus.o(i._ZN4CBUS8TransmitEcPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Print(char*)
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Tx(unsigned char)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::WaitForReceive(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEBSetting(unsigned short)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEASetting(unsigned short)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureBPSetting(unsigned short)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderB(unsigned char)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderA(unsigned char)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::EnableIDP()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::MoveAxis(double, unsigned char)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Motion(double*, float)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusLeveling()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::SetNozzleState(unsigned char, unsigned char)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointM()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointD()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointC()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointB()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointA()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusBusy()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::EnableStepper()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::SetPosition(double, char)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::DisableIDP()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::AutoHoming()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::TestLink()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEnvironment()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderB()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderA()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEBSetting()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEASetting()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBasePlane()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBPSetting()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderB()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderA()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerBasePlane()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderB()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderA()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusExtruderB()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusExtruderA()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusBasePlane()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Rest()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Rest()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::TestLink()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Max()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Max()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusStepper()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZMax()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionYMax()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionXMax()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusHomed()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusIDP()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZ()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionY()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionX()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionB()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionA()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusFA()
</UL>

<P><STRONG><a name="[f3]"></a>CBUS::TestReply(char)</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, cbus.o(i._ZN4CBUS9TestReplyEc))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEBSetting(unsigned short)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEASetting(unsigned short)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureBPSetting(unsigned short)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderB(unsigned char)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderA(unsigned char)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::EnableIDP()
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::MoveAxis(double, unsigned char)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Motion(double*, float)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusLeveling()
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::SetNozzleState(unsigned char, unsigned char)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointM()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointD()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointC()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointB()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointA()
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusBusy()
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::EnableStepper()
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::SetPosition(double, char)
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::DisableIDP()
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::AutoHoming()
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::TestLink()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEnvironment()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderB()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderA()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEBSetting()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEASetting()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBasePlane()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBPSetting()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderB()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderA()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerBasePlane()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderB()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderA()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusExtruderB()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusExtruderA()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusBasePlane()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Rest()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Rest()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::TestLink()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Max()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Max()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusStepper()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZMax()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionYMax()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionXMax()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusHomed()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusIDP()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZ()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionY()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionX()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionB()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionA()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusFA()
</UL>

<P><STRONG><a name="[d7]"></a>IBUS::WaitForReceive(unsigned)</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, ibus.o(i._ZN4IBUS14WaitForReceiveEj))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
</UL>

<P><STRONG><a name="[dc]"></a>IBUS::TestIfVerifyError()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ibus.o(i._ZN4IBUS17TestIfVerifyErrorEv))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::FileTest()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileTotalDistance()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileCommandNumber()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileEstimateTime()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetTotalVolume()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFilePointer()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetRestVolume()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo6()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo5()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo4()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo3()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo2()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo1()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileSize()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileName()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::SetInfoScreen()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::SetStatusBar()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::GetCommand()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ExpandDictionary(char*)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::HangUpConsole()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::FileOpen()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::FileReadLine(unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[d5]"></a>IBUS::Tx(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ibus.o(i._ZN4IBUS2TxEh))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Print(char*)
</UL>

<P><STRONG><a name="[135]"></a>IBUS::Init()</STRONG> (Thumb, 172 bytes, Stack size 0 bytes, ibus.o(i._ZN4IBUS4InitEv))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d4]"></a>IBUS::Print(char*)</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, ibus.o(i._ZN4IBUS5PrintEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Tx(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
</UL>

<P><STRONG><a name="[d6]"></a>IBUS::Transmit(char, char*, unsigned)</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, ibus.o(i._ZN4IBUS8TransmitEcPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Print(char*)
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Tx(unsigned char)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::WaitForReceive(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::TestLink()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::FileTest()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileTotalDistance()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileCommandNumber()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileEstimateTime()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetTotalVolume()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFilePointer()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetRestVolume()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo6()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo5()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo4()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo3()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo2()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo1()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileSize()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileName()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::TestLink()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::SetInfoScreen()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::SetStatusBar()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::GetCommand()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ExpandDictionary(char*)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::HangUpConsole()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::FileOpen()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::FileReadLine(unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[db]"></a>IBUS::TestReply(char)</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ibus.o(i._ZN4IBUS9TestReplyEc))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::TestLink()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::FileTest()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileTotalDistance()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileCommandNumber()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileEstimateTime()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetTotalVolume()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFilePointer()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetRestVolume()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo6()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo5()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo4()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo3()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo2()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo1()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileSize()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileName()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::TestLink()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::SetInfoScreen()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::SetStatusBar()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::GetCommand()
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ExpandDictionary(char*)
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ConsoleDisplay(char*, bool)
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::HangUpConsole()
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::FileOpen()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::FileReadLine(unsigned char, unsigned char*)
</UL>

<P><STRONG><a name="[9f]"></a>AUXIO::GetStatusMaterialA()</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, auxio.o(i._ZN5AUXIO18GetStatusMaterialAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AUXIO::GetStatusMaterialA() &rArr; ABUS::Transmit(char, char*, unsigned) &rArr; ABUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::TestReply(char)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::Transmit(char, char*, unsigned)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::AUX1GetStatus()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::StatusCheck()
</UL>

<P><STRONG><a name="[a0]"></a>AUXIO::GetStatusMaterialB()</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, auxio.o(i._ZN5AUXIO18GetStatusMaterialBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AUXIO::GetStatusMaterialB() &rArr; ABUS::Transmit(char, char*, unsigned) &rArr; ABUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::TestReply(char)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::Transmit(char, char*, unsigned)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::AUX1GetStatus()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::StatusCheck()
</UL>

<P><STRONG><a name="[79]"></a>AUXIO::SetStatusMainLight(bool)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, auxio.o(i._ZN5AUXIO18SetStatusMainLightEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AUXIO::SetStatusMainLight(bool) &rArr; ABUS::Transmit(char, char*, unsigned) &rArr; ABUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::TestReply(char)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::Transmit(char, char*, unsigned)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableMainLight()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableMainLight()
</UL>

<P><STRONG><a name="[86]"></a>AUXIO::SetStatusAuxiliaryLight(bool)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, auxio.o(i._ZN5AUXIO23SetStatusAuxiliaryLightEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AUXIO::SetStatusAuxiliaryLight(bool) &rArr; ABUS::Transmit(char, char*, unsigned) &rArr; ABUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::TestReply(char)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::Transmit(char, char*, unsigned)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableAuxiliaryLight()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableAuxiliaryLight()
</UL>

<P><STRONG><a name="[78]"></a>AUXIO::TestLink()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, auxio.o(i._ZN5AUXIO8TestLinkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = AUXIO::TestLink() &rArr; ABUS::Transmit(char, char*, unsigned) &rArr; ABUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::TestReply(char)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::Transmit(char, char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::AUX1GetStatus()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::PreCheck()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableAuxiliaryLight()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableAuxiliaryLight()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableMainLight()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableMainLight()
</UL>

<P><STRONG><a name="[da]"></a>CCONI::GetCommand()</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, cconi.o(i._ZN5CCONI10GetCommandEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CCONI::GetCommand() &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Flush()
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::ConsoleGetCommand()
</UL>

<P><STRONG><a name="[de]"></a>CCONI::SetStatusBar()</STRONG> (Thumb, 182 bytes, Stack size 72 bytes, cconi.o(i._ZN5CCONI12SetStatusBarEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = CCONI::SetStatusBar() &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::StatusBarRefresh()
</UL>

<P><STRONG><a name="[6f]"></a>CCONI::HangUpConsole()</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, cconi.o(i._ZN5CCONI13HangUpConsoleEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CCONI::HangUpConsole() &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::MoveAxisZ(unsigned)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::MoveAxisY(unsigned)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::MoveAxisX(unsigned)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableNozzleB()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableNozzleA()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableNozzleB()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableNozzleA()
</UL>

<P><STRONG><a name="[df]"></a>CCONI::SetInfoScreen()</STRONG> (Thumb, 680 bytes, Stack size 128 bytes, cconi.o(i._ZN5CCONI13SetInfoScreenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CCONI::SetInfoScreen() &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::Num2Chr(unsigned, char*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::InfoLCDRefreash()
</UL>

<P><STRONG><a name="[5c]"></a>CCONI::ConsoleDisplay(char*, bool)</STRONG> (Thumb, 234 bytes, Stack size 288 bytes, cconi.o(i._ZN5CCONI14ConsoleDisplayEPcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::PrintNum(unsigned)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::MoveAxisZ(unsigned)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::MoveAxisY(unsigned)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::MoveAxisX(unsigned)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::ErrorInfo()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableIDP()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemBP(unsigned)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::NotFound()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableAuxiliaryLight()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableAuxiliaryLight()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::ResumeManufacturing()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::ManufacturingReport()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::StartManufacturing()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::PauseManufacturing()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::StopManufacturing()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::ManufacturingInfo()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableMainLight()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableMainLight()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::ReloadFilament()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableNozzleB()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableNozzleA()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableStepper()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableNozzleB()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableNozzleA()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::WarningInfo()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::StorageInfo()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::RefreshDict()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtB(unsigned)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtA(unsigned)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtB(unsigned)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtA(unsigned)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableIDP()
</UL>

<P><STRONG><a name="[e1]"></a>CCONI::ExpandDictionary(char*)</STRONG> (Thumb, 192 bytes, Stack size 280 bytes, cconi.o(i._ZN5CCONI16ExpandDictionaryEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = CCONI::ExpandDictionary(char*) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::DictInit()
</UL>

<P><STRONG><a name="[e0]"></a>CCONI::Num2Chr(unsigned, char*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, cconi.o(i._ZN5CCONI7Num2ChrEjPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CCONI::Num2Chr(unsigned, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::SetInfoScreen()
</UL>

<P><STRONG><a name="[e2]"></a>CCONI::TestLink()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, cconi.o(i._ZN5CCONI8TestLinkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CCONI::TestLink() &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::ConsoleGetCommand()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::InfoLCDRefreash()
</UL>

<P><STRONG><a name="[e3]"></a>FCONI::GetFileName()</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, fconi.o(i._ZN5FCONI11GetFileNameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FCONI::GetFileName() &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::FCONGetStatus()
</UL>

<P><STRONG><a name="[e4]"></a>FCONI::GetFileSize()</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, fconi.o(i._ZN5FCONI11GetFileSizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FCONI::GetFileSize() &rArr; FCONI::CharToNumber(unsigned char, unsigned char*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::CharToNumber(unsigned char, unsigned char*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::FCONGetStatus()
</UL>

<P><STRONG><a name="[e5]"></a>FCONI::CharToNumber(unsigned char, unsigned char*)</STRONG> (Thumb, 68 bytes, Stack size 112 bytes, fconi.o(i._ZN5FCONI12CharToNumberEhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FCONI::CharToNumber(unsigned char, unsigned char*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileTotalDistance()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileCommandNumber()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileEstimateTime()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetTotalVolume()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFilePointer()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetRestVolume()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo6()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo5()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo4()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo3()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo2()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo1()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileSize()
</UL>

<P><STRONG><a name="[a9]"></a>FCONI::FileReadLine(unsigned char, unsigned char*)</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, fconi.o(i._ZN5FCONI12FileReadLineEhPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = FCONI::FileReadLine(unsigned char, unsigned char*) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::GetInstruction()
</UL>

<P><STRONG><a name="[e7]"></a>FCONI::GetFileInfo1()</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, fconi.o(i._ZN5FCONI12GetFileInfo1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FCONI::GetFileInfo1() &rArr; FCONI::CharToNumber(unsigned char, unsigned char*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::CharToNumber(unsigned char, unsigned char*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::FCONGetStatus()
</UL>

<P><STRONG><a name="[e8]"></a>FCONI::GetFileInfo2()</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, fconi.o(i._ZN5FCONI12GetFileInfo2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FCONI::GetFileInfo2() &rArr; FCONI::CharToNumber(unsigned char, unsigned char*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::CharToNumber(unsigned char, unsigned char*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::FCONGetStatus()
</UL>

<P><STRONG><a name="[e9]"></a>FCONI::GetFileInfo3()</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, fconi.o(i._ZN5FCONI12GetFileInfo3Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FCONI::GetFileInfo3() &rArr; FCONI::CharToNumber(unsigned char, unsigned char*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::CharToNumber(unsigned char, unsigned char*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::FCONGetStatus()
</UL>

<P><STRONG><a name="[ea]"></a>FCONI::GetFileInfo4()</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, fconi.o(i._ZN5FCONI12GetFileInfo4Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FCONI::GetFileInfo4() &rArr; FCONI::CharToNumber(unsigned char, unsigned char*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::CharToNumber(unsigned char, unsigned char*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::FCONGetStatus()
</UL>

<P><STRONG><a name="[eb]"></a>FCONI::GetFileInfo5()</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, fconi.o(i._ZN5FCONI12GetFileInfo5Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FCONI::GetFileInfo5() &rArr; FCONI::CharToNumber(unsigned char, unsigned char*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::CharToNumber(unsigned char, unsigned char*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::FCONGetStatus()
</UL>

<P><STRONG><a name="[ec]"></a>FCONI::GetFileInfo6()</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, fconi.o(i._ZN5FCONI12GetFileInfo6Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FCONI::GetFileInfo6() &rArr; FCONI::CharToNumber(unsigned char, unsigned char*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::CharToNumber(unsigned char, unsigned char*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::FCONGetStatus()
</UL>

<P><STRONG><a name="[ed]"></a>FCONI::GetRestVolume()</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, fconi.o(i._ZN5FCONI13GetRestVolumeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FCONI::GetRestVolume() &rArr; FCONI::CharToNumber(unsigned char, unsigned char*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::CharToNumber(unsigned char, unsigned char*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::FCONGetStatus()
</UL>

<P><STRONG><a name="[a8]"></a>FCONI::GetFilePointer()</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, fconi.o(i._ZN5FCONI14GetFilePointerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FCONI::GetFilePointer() &rArr; FCONI::CharToNumber(unsigned char, unsigned char*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::CharToNumber(unsigned char, unsigned char*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::FCONGetStatus()
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::GetInstruction()
</UL>

<P><STRONG><a name="[ee]"></a>FCONI::GetTotalVolume()</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, fconi.o(i._ZN5FCONI14GetTotalVolumeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FCONI::GetTotalVolume() &rArr; FCONI::CharToNumber(unsigned char, unsigned char*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::CharToNumber(unsigned char, unsigned char*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::FCONGetStatus()
</UL>

<P><STRONG><a name="[ef]"></a>FCONI::GetFileEstimateTime()</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, fconi.o(i._ZN5FCONI19GetFileEstimateTimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FCONI::GetFileEstimateTime() &rArr; FCONI::CharToNumber(unsigned char, unsigned char*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::CharToNumber(unsigned char, unsigned char*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::FCONGetStatus()
</UL>

<P><STRONG><a name="[f0]"></a>FCONI::GetFileCommandNumber()</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, fconi.o(i._ZN5FCONI20GetFileCommandNumberEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FCONI::GetFileCommandNumber() &rArr; FCONI::CharToNumber(unsigned char, unsigned char*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::CharToNumber(unsigned char, unsigned char*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::FCONGetStatus()
</UL>

<P><STRONG><a name="[f1]"></a>FCONI::GetFileTotalDistance()</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, fconi.o(i._ZN5FCONI20GetFileTotalDistanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = FCONI::GetFileTotalDistance() &rArr; FCONI::CharToNumber(unsigned char, unsigned char*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::CharToNumber(unsigned char, unsigned char*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::FCONGetStatus()
</UL>

<P><STRONG><a name="[c8]"></a>FCONI::FileOpen()</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, fconi.o(i._ZN5FCONI8FileOpenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FCONI::FileOpen() &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::PreCheck()
</UL>

<P><STRONG><a name="[f2]"></a>FCONI::FileTest()</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, fconi.o(i._ZN5FCONI8FileTestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = FCONI::FileTest() &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestIfVerifyError()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::FCONGetStatus()
</UL>

<P><STRONG><a name="[c6]"></a>FCONI::TestLink()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, fconi.o(i._ZN5FCONI8TestLinkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FCONI::TestLink() &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::TestReply(char)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Transmit(char, char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::FCONGetStatus()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::PreCheck()
</UL>

<P><STRONG><a name="[89]"></a>SCONI::AutoHoming()</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sconi.o(i._ZN5SCONI10AutoHomingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCONI::AutoHoming() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
</UL>

<P><STRONG><a name="[5b]"></a>SCONI::DisableIDP()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sconi.o(i._ZN5SCONI10DisableIDPEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCONI::DisableIDP() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableIDP()
</UL>

<P><STRONG><a name="[b0]"></a>SCONI::GetStatusFA()</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, sconi.o(i._ZN5SCONI11GetStatusFAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCONI::GetStatusFA() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Round()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
</UL>

<P><STRONG><a name="[ba]"></a>SCONI::SetPosition(double, char)</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, sconi.o(i._ZN5SCONI11SetPositionEdc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SCONI::SetPosition(double, char) &rArr; SCONI::Flo2Chr(char*, double, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
</UL>

<P><STRONG><a name="[b4]"></a>SCONI::GetPositionA()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI12GetPositionAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetPositionA() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Round()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::PreCheck()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
</UL>

<P><STRONG><a name="[b5]"></a>SCONI::GetPositionB()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI12GetPositionBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetPositionB() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Round()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::PreCheck()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
</UL>

<P><STRONG><a name="[b1]"></a>SCONI::GetPositionX()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI12GetPositionXEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetPositionX() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Round()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::PreCheck()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
</UL>

<P><STRONG><a name="[b2]"></a>SCONI::GetPositionY()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI12GetPositionYEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetPositionY() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Round()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::PreCheck()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
</UL>

<P><STRONG><a name="[b3]"></a>SCONI::GetPositionZ()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI12GetPositionZEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetPositionZ() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Round()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::PreCheck()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
</UL>

<P><STRONG><a name="[f7]"></a>SCONI::GetStatusIDP()</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sconi.o(i._ZN5SCONI12GetStatusIDPEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCONI::GetStatusIDP() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[72]"></a>SCONI::EnableStepper()</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, sconi.o(i._ZN5SCONI13EnableStepperEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCONI::EnableStepper() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableStepper()
</UL>

<P><STRONG><a name="[6d]"></a>SCONI::GetStatusBusy()</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, sconi.o(i._ZN5SCONI13GetStatusBusyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCONI::GetStatusBusy() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::MoveAxisZ(unsigned)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::MoveAxisY(unsigned)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::MoveAxisX(unsigned)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableNozzleB()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableNozzleA()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableNozzleB()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableNozzleA()
</UL>

<P><STRONG><a name="[8a]"></a>SCONI::GetTestPointA()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI13GetTestPointAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetTestPointA() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
</UL>

<P><STRONG><a name="[8b]"></a>SCONI::GetTestPointB()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI13GetTestPointBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetTestPointB() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
</UL>

<P><STRONG><a name="[8c]"></a>SCONI::GetTestPointC()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI13GetTestPointCEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetTestPointC() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
</UL>

<P><STRONG><a name="[8d]"></a>SCONI::GetTestPointD()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI13GetTestPointDEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetTestPointD() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
</UL>

<P><STRONG><a name="[8e]"></a>SCONI::GetTestPointM()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI13GetTestPointMEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetTestPointM() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
</UL>

<P><STRONG><a name="[c7]"></a>SCONI::GetStatusHomed()</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sconi.o(i._ZN5SCONI14GetStatusHomedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCONI::GetStatusHomed() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::PreCheck()
</UL>

<P><STRONG><a name="[6c]"></a>SCONI::SetNozzleState(unsigned char, unsigned char)</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, sconi.o(i._ZN5SCONI14SetNozzleStateEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SCONI::SetNozzleState(unsigned char, unsigned char) &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableNozzleB()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableNozzleA()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableNozzleB()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableNozzleA()
</UL>

<P><STRONG><a name="[f8]"></a>SCONI::GetPositionXMax()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI15GetPositionXMaxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetPositionXMax() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[f9]"></a>SCONI::GetPositionYMax()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI15GetPositionYMaxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetPositionYMax() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[fa]"></a>SCONI::GetPositionZMax()</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, sconi.o(i._ZN5SCONI15GetPositionZMaxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SCONI::GetPositionZMax() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[fb]"></a>SCONI::GetStatusStepper()</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, sconi.o(i._ZN5SCONI16GetStatusStepperEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCONI::GetStatusStepper() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[8f]"></a>SCONI::GetStatusLeveling()</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, sconi.o(i._ZN5SCONI17GetStatusLevelingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCONI::GetStatusLeveling() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
</UL>

<P><STRONG><a name="[b7]"></a>SCONI::Motion(double*, float)</STRONG> (Thumb, 390 bytes, Stack size 120 bytes, sconi.o(i._ZN5SCONI6MotionEPdf))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SCONI::Motion(double*, float) &rArr; SCONI::Flo2Chr(char*, double, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Round()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
</UL>

<P><STRONG><a name="[f6]"></a>SCONI::Chr2Flo(char*, unsigned, unsigned, bool)</STRONG> (Thumb, 236 bytes, Stack size 64 bytes, sconi.o(i._ZN5SCONI7Chr2FloEPcjjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointM()
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointD()
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointC()
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointB()
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetTestPointA()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Rest()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Rest()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Max()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Max()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZMax()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionYMax()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionXMax()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZ()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionY()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionX()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionB()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionA()
</UL>

<P><STRONG><a name="[f5]"></a>SCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, sconi.o(i._ZN5SCONI7Flo2ChrEPcdjjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SCONI::Flo2Chr(char*, double, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::MoveAxis(double, unsigned char)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Motion(double*, float)
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::SetPosition(double, char)
</UL>

<P><STRONG><a name="[100]"></a>SCONI::GetL1Max()</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, sconi.o(i._ZN5SCONI8GetL1MaxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SCONI::GetL1Max() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[101]"></a>SCONI::GetL2Max()</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, sconi.o(i._ZN5SCONI8GetL2MaxEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SCONI::GetL2Max() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[9b]"></a>SCONI::MoveAxis(double, unsigned char)</STRONG> (Thumb, 258 bytes, Stack size 120 bytes, sconi.o(i._ZN5SCONI8MoveAxisEdh))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SCONI::MoveAxis(double, unsigned char) &rArr; SCONI::Flo2Chr(char*, double, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::MoveAxisZ(unsigned)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::MoveAxisY(unsigned)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::MoveAxisX(unsigned)
</UL>

<P><STRONG><a name="[c4]"></a>SCONI::TestLink()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sconi.o(i._ZN5SCONI8TestLinkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCONI::TestLink() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::PreCheck()
</UL>

<P><STRONG><a name="[96]"></a>SCONI::EnableIDP()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sconi.o(i._ZN5SCONI9EnableIDPEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SCONI::EnableIDP() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableIDP()
</UL>

<P><STRONG><a name="[102]"></a>SCONI::GetL1Rest()</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, sconi.o(i._ZN5SCONI9GetL1RestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SCONI::GetL1Rest() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[103]"></a>SCONI::GetL2Rest()</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, sconi.o(i._ZN5SCONI9GetL2RestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SCONI::GetL2Rest() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
</UL>

<P><STRONG><a name="[104]"></a>SHELL::Init()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, shell.o(i._ZN5SHELL4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = SHELL::Init() &rArr; SHELL::DictInit() &rArr; CCONI::ExpandDictionary(char*) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::DictInit()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Flush()
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>SHELL::Flush()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, shell.o(i._ZN5SHELL5FlushEv))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::GetCommand()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
</UL>

<P><STRONG><a name="[105]"></a>SHELL::Match(char*, char*)</STRONG> (Thumb, 138 bytes, Stack size 88 bytes, shell.o(i._ZN5SHELL5MatchEPcS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SHELL::Match(char*, char*) &rArr; SHELL::GetWord(char*, char*, char&)
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::GetWord(char*, char*, char&)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Compare(char*, char*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[108]"></a>SHELL::Upper(char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, shell.o(i._ZN5SHELL5UpperEc))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Compare(char*, char*)
</UL>

<P><STRONG><a name="[10d]"></a>SHELL::Chr2Num(char*)</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, shell.o(i._ZN5SHELL7Chr2NumEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SHELL::Chr2Num(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::GetNumber(char*, unsigned&)
</UL>

<P><STRONG><a name="[107]"></a>SHELL::Compare(char*, char*)</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, shell.o(i._ZN5SHELL7CompareEPcS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SHELL::Compare(char*, char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Upper(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Match(char*, char*)
</UL>

<P><STRONG><a name="[109]"></a>SHELL::Decoder()</STRONG> (Thumb, 776 bytes, Stack size 16 bytes, shell.o(i._ZN5SHELL7DecoderEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = SHELL::Decoder() &rArr; INSTRUCTION::ErrorInfo() &rArr; INSTRUCTION::PrintNum(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::MoveAxisZ(unsigned)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::MoveAxisY(unsigned)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::MoveAxisX(unsigned)
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::ErrorInfo()
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableIDP()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemBP(unsigned)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::NotFound()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableAuxiliaryLight()
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableAuxiliaryLight()
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::ResumeManufacturing()
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::ManufacturingReport()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::StartManufacturing()
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::PauseManufacturing()
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::StopManufacturing()
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::ManufacturingInfo()
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableMainLight()
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableMainLight()
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::ReloadFilament()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableNozzleB()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableNozzleA()
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableStepper()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableNozzleB()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableNozzleA()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::WarningInfo()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::StorageInfo()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::RefreshDict()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtB(unsigned)
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtA(unsigned)
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtB(unsigned)
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtA(unsigned)
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableIDP()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::GetNumber(char*, unsigned&)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Match(char*, char*)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Flush()
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::ConsoleGetCommand()
</UL>

<P><STRONG><a name="[106]"></a>SHELL::GetWord(char*, char*, char&)</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, shell.o(i._ZN5SHELL7GetWordEPcS0_Rc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SHELL::GetWord(char*, char*, char&)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::IsNumber(char)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::IsLetter(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::GetNumber(char*, unsigned&)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Match(char*, char*)
</UL>

<P><STRONG><a name="[67]"></a>SHELL::DictInit()</STRONG> (Thumb, 254 bytes, Stack size 8 bytes, shell.o(i._ZN5SHELL8DictInitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = SHELL::DictInit() &rArr; CCONI::ExpandDictionary(char*) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::ExpandDictionary(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::RefreshDict()
</UL>

<P><STRONG><a name="[10b]"></a>SHELL::IsLetter(char)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, shell.o(i._ZN5SHELL8IsLetterEc))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::GetWord(char*, char*, char&)
</UL>

<P><STRONG><a name="[10c]"></a>SHELL::IsNumber(char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, shell.o(i._ZN5SHELL8IsNumberEc))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::GetNumber(char*, unsigned&)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::GetWord(char*, char*, char&)
</UL>

<P><STRONG><a name="[10a]"></a>SHELL::GetNumber(char*, unsigned&)</STRONG> (Thumb, 130 bytes, Stack size 56 bytes, shell.o(i._ZN5SHELL9GetNumberEPcRj))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SHELL::GetNumber(char*, unsigned&) &rArr; SHELL::GetWord(char*, char*, char&)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::IsNumber(char)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::GetWord(char*, char*, char&)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Chr2Num(char*)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
</UL>

<P><STRONG><a name="[c1]"></a>TCONI::GetStatusBasePlane()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tconi.o(i._ZN5TCONI18GetStatusBasePlaneEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TCONI::GetStatusBasePlane() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
</UL>

<P><STRONG><a name="[bb]"></a>TCONI::GetStatusExtruderA()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tconi.o(i._ZN5TCONI18GetStatusExtruderAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TCONI::GetStatusExtruderA() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
</UL>

<P><STRONG><a name="[be]"></a>TCONI::GetStatusExtruderB()</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, tconi.o(i._ZN5TCONI18GetStatusExtruderBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TCONI::GetStatusExtruderB() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
</UL>

<P><STRONG><a name="[10e]"></a>TCONI::GetCoolerPowerExtruderA()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetCoolerPowerExtruderAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetCoolerPowerExtruderA() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[110]"></a>TCONI::GetCoolerPowerExtruderB()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetCoolerPowerExtruderBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetCoolerPowerExtruderB() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[111]"></a>TCONI::GetHeaterPowerBasePlane()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetHeaterPowerBasePlaneEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetHeaterPowerBasePlane() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[112]"></a>TCONI::GetHeaterPowerExtruderA()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetHeaterPowerExtruderAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetHeaterPowerExtruderA() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[113]"></a>TCONI::GetHeaterPowerExtruderB()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetHeaterPowerExtruderBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetHeaterPowerExtruderB() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[c3]"></a>TCONI::GetTemperatureBPSetting()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetTemperatureBPSettingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetTemperatureBPSetting() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
</UL>

<P><STRONG><a name="[c2]"></a>TCONI::GetTemperatureBasePlane()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetTemperatureBasePlaneEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetTemperatureBasePlane() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
</UL>

<P><STRONG><a name="[bd]"></a>TCONI::GetTemperatureEASetting()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetTemperatureEASettingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetTemperatureEASetting() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
</UL>

<P><STRONG><a name="[c0]"></a>TCONI::GetTemperatureEBSetting()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetTemperatureEBSettingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetTemperatureEBSetting() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
</UL>

<P><STRONG><a name="[bc]"></a>TCONI::GetTemperatureExtruderA()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetTemperatureExtruderAEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetTemperatureExtruderA() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
</UL>

<P><STRONG><a name="[bf]"></a>TCONI::GetTemperatureExtruderB()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI23GetTemperatureExtruderBEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetTemperatureExtruderB() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
</UL>

<P><STRONG><a name="[5e]"></a>TCONI::SetCoolerPowerExtruderA(unsigned char)</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, tconi.o(i._ZN5TCONI23SetCoolerPowerExtruderAEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TCONI::SetCoolerPowerExtruderA(unsigned char) &rArr; TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtA(unsigned)
</UL>

<P><STRONG><a name="[61]"></a>TCONI::SetCoolerPowerExtruderB(unsigned char)</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, tconi.o(i._ZN5TCONI23SetCoolerPowerExtruderBEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TCONI::SetCoolerPowerExtruderB(unsigned char) &rArr; TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetColExtB(unsigned)
</UL>

<P><STRONG><a name="[94]"></a>TCONI::SetTemperatureBPSetting(unsigned short)</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, tconi.o(i._ZN5TCONI23SetTemperatureBPSettingEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TCONI::SetTemperatureBPSetting(unsigned short) &rArr; TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemBP(unsigned)
</UL>

<P><STRONG><a name="[63]"></a>TCONI::SetTemperatureEASetting(unsigned short)</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, tconi.o(i._ZN5TCONI23SetTemperatureEASettingEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TCONI::SetTemperatureEASetting(unsigned short) &rArr; TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtA(unsigned)
</UL>

<P><STRONG><a name="[65]"></a>TCONI::SetTemperatureEBSetting(unsigned short)</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, tconi.o(i._ZN5TCONI23SetTemperatureEBSettingEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TCONI::SetTemperatureEBSetting(unsigned short) &rArr; TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Process()
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::SetTemExtB(unsigned)
</UL>

<P><STRONG><a name="[115]"></a>TCONI::GetTemperatureEnvironment()</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, tconi.o(i._ZN5TCONI25GetTemperatureEnvironmentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TCONI::GetTemperatureEnvironment() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestIfVerifyError()
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
</UL>

<P><STRONG><a name="[10f]"></a>TCONI::Chr2Flo(char*, unsigned, unsigned, bool)</STRONG> (Thumb, 236 bytes, Stack size 64 bytes, tconi.o(i._ZN5TCONI7Chr2FloEPcjjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEnvironment()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderB()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderA()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEBSetting()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEASetting()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBasePlane()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBPSetting()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderB()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderA()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerBasePlane()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderB()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderA()
</UL>

<P><STRONG><a name="[114]"></a>TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)</STRONG> (Thumb, 262 bytes, Stack size 56 bytes, tconi.o(i._ZN5TCONI7Flo2ChrEPcdjjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEBSetting(unsigned short)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEASetting(unsigned short)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureBPSetting(unsigned short)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderB(unsigned char)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderA(unsigned char)
</UL>

<P><STRONG><a name="[c5]"></a>TCONI::TestLink()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, tconi.o(i._ZN5TCONI8TestLinkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TCONI::TestLink() &rArr; CBUS::Transmit(char, char*, unsigned) &rArr; CBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::TestReply(char)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Transmit(char, char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::PreCheck()
</UL>

<P><STRONG><a name="[116]"></a>RTCLOCK::IIC_WaitAck()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rtclock.o(i._ZN7RTCLOCK11IIC_WaitAckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RTCLOCK::IIC_WaitAck() &rArr; RTCLOCK::IIC_Stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_Stop()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::DelayUs(unsigned char)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA(bool)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL(bool)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_GetSDA()
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::WriteData(unsigned char, unsigned char)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::ReadData(unsigned char)
</UL>

<P><STRONG><a name="[11c]"></a>RTCLOCK::WriteEnable()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rtclock.o(i._ZN7RTCLOCK11WriteEnableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RTCLOCK::WriteEnable() &rArr; RTCLOCK::ReadData(unsigned char) &rArr; RTCLOCK::IIC_ReadByte(bool) &rArr; RTCLOCK::IIC_NAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::WriteData(unsigned char, unsigned char)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::ReadData(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::Write(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[11f]"></a>RTCLOCK::IIC_ReadByte(bool)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, rtclock.o(i._ZN7RTCLOCK12IIC_ReadByteEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTCLOCK::IIC_ReadByte(bool) &rArr; RTCLOCK::IIC_NAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_NAck()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_Ack()
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::DelayUs(unsigned char)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA(bool)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL(bool)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_GetSDA()
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::ReadData(unsigned char)
</UL>

<P><STRONG><a name="[122]"></a>RTCLOCK::IIC_SendByte(unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, rtclock.o(i._ZN7RTCLOCK12IIC_SendByteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTCLOCK::IIC_SendByte(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::DelayUs(unsigned char)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA(bool)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::WriteData(unsigned char, unsigned char)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::ReadData(unsigned char)
</UL>

<P><STRONG><a name="[123]"></a>RTCLOCK::WriteDisable()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rtclock.o(i._ZN7RTCLOCK12WriteDisableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RTCLOCK::WriteDisable() &rArr; RTCLOCK::ReadData(unsigned char) &rArr; RTCLOCK::IIC_ReadByte(bool) &rArr; RTCLOCK::IIC_NAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::WriteData(unsigned char, unsigned char)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::ReadData(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::Write(unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[124]"></a>RTCLOCK::Init()</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, rtclock.o(i._ZN7RTCLOCK4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RTCLOCK::Init() &rArr; RTCLOCK::GetTime() &rArr; RTCLOCK::Read(unsigned char&, unsigned char) &rArr; RTCLOCK::ReadData(unsigned char) &rArr; RTCLOCK::IIC_ReadByte(bool) &rArr; RTCLOCK::IIC_NAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::GetTime()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_Init()
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::Write(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>RTCLOCK::Read(unsigned char&, unsigned char)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, rtclock.o(i._ZN7RTCLOCK4ReadERhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RTCLOCK::Read(unsigned char&, unsigned char) &rArr; RTCLOCK::ReadData(unsigned char) &rArr; RTCLOCK::IIC_ReadByte(bool) &rArr; RTCLOCK::IIC_NAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::ReadData(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::GetTime()
</UL>

<P><STRONG><a name="[126]"></a>RTCLOCK::Write(unsigned char, unsigned char)</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, rtclock.o(i._ZN7RTCLOCK5WriteEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTCLOCK::Write(unsigned char, unsigned char) &rArr; RTCLOCK::WriteDisable() &rArr; RTCLOCK::ReadData(unsigned char) &rArr; RTCLOCK::IIC_ReadByte(bool) &rArr; RTCLOCK::IIC_NAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::WriteData(unsigned char, unsigned char)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::ReadData(unsigned char)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::WriteDisable()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::WriteEnable()
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::Init()
</UL>

<P><STRONG><a name="[118]"></a>RTCLOCK::DelayUs(unsigned char)</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, rtclock.o(i._ZN7RTCLOCK7DelayUsEh))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_Start()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_Stop()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_NAck()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_Ack()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_SendByte(unsigned char)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_ReadByte(bool)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_WaitAck()
</UL>

<P><STRONG><a name="[127]"></a>RTCLOCK::GetTime()</STRONG> (Thumb, 386 bytes, Stack size 32 bytes, rtclock.o(i._ZN7RTCLOCK7GetTimeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RTCLOCK::GetTime() &rArr; RTCLOCK::Read(unsigned char&, unsigned char) &rArr; RTCLOCK::ReadData(unsigned char) &rArr; RTCLOCK::IIC_ReadByte(bool) &rArr; RTCLOCK::IIC_NAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::Read(unsigned char&, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::Init()
</UL>

<P><STRONG><a name="[121]"></a>RTCLOCK::IIC_Ack()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtclock.o(i._ZN7RTCLOCK7IIC_AckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTCLOCK::IIC_Ack()
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::DelayUs(unsigned char)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA(bool)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_ReadByte(bool)
</UL>

<P><STRONG><a name="[125]"></a>RTCLOCK::IIC_Init()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtclock.o(i._ZN7RTCLOCK8IIC_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTCLOCK::IIC_Init()
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA(bool)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::Init()
</UL>

<P><STRONG><a name="[120]"></a>RTCLOCK::IIC_NAck()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtclock.o(i._ZN7RTCLOCK8IIC_NAckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTCLOCK::IIC_NAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::DelayUs(unsigned char)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA(bool)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_ReadByte(bool)
</UL>

<P><STRONG><a name="[11a]"></a>RTCLOCK::IIC_Stop()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtclock.o(i._ZN7RTCLOCK8IIC_StopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTCLOCK::IIC_Stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::DelayUs(unsigned char)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA(bool)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::WriteData(unsigned char, unsigned char)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::ReadData(unsigned char)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_WaitAck()
</UL>

<P><STRONG><a name="[11e]"></a>RTCLOCK::ReadData(unsigned char)</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rtclock.o(i._ZN7RTCLOCK8ReadDataEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RTCLOCK::ReadData(unsigned char) &rArr; RTCLOCK::IIC_ReadByte(bool) &rArr; RTCLOCK::IIC_NAck()
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_Start()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_Stop()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_SendByte(unsigned char)
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_ReadByte(bool)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_WaitAck()
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::Write(unsigned char, unsigned char)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::Read(unsigned char&, unsigned char)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::WriteDisable()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::WriteEnable()
</UL>

<P><STRONG><a name="[129]"></a>RTCLOCK::IIC_Start()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtclock.o(i._ZN7RTCLOCK9IIC_StartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTCLOCK::IIC_Start()
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::DelayUs(unsigned char)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA(bool)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::WriteData(unsigned char, unsigned char)
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::ReadData(unsigned char)
</UL>

<P><STRONG><a name="[11d]"></a>RTCLOCK::WriteData(unsigned char, unsigned char)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, rtclock.o(i._ZN7RTCLOCK9WriteDataEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTCLOCK::WriteData(unsigned char, unsigned char) &rArr; RTCLOCK::IIC_WaitAck() &rArr; RTCLOCK::IIC_Stop()
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_Start()
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_Stop()
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_SendByte(unsigned char)
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::IIC_WaitAck()
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::Write(unsigned char, unsigned char)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::WriteDisable()
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::WriteEnable()
</UL>

<P><STRONG><a name="[51]"></a>AUTOMATE::ClickCount()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, automate.o(i._ZN8AUTOMATE10ClickCountEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AUTOMATE::ClickCount()
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Tick()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[12b]"></a>AUTOMATE::AUX1GetStatus()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, automate.o(i._ZN8AUTOMATE13AUX1GetStatusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AUTOMATE::AUX1GetStatus() &rArr; AUXIO::TestLink() &rArr; ABUS::Transmit(char, char*, unsigned) &rArr; ABUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::TestLink()
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::GetStatusMaterialB()
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUXIO::GetStatusMaterialA()
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Checking(unsigned char)
</UL>

<P><STRONG><a name="[12c]"></a>AUTOMATE::FCONGetStatus()</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, automate.o(i._ZN8AUTOMATE13FCONGetStatusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = AUTOMATE::FCONGetStatus() &rArr; FCONI::GetFileTotalDistance() &rArr; FCONI::CharToNumber(unsigned char, unsigned char*) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::TestLink()
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::FileTest()
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileTotalDistance()
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileCommandNumber()
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileEstimateTime()
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetTotalVolume()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFilePointer()
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetRestVolume()
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo6()
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo5()
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo4()
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo3()
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo2()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileInfo1()
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileSize()
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCONI::GetFileName()
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Checking(unsigned char)
</UL>

<P><STRONG><a name="[12d]"></a>AUTOMATE::SCONGetStatus()</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, automate.o(i._ZN8AUTOMATE13SCONGetStatusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AUTOMATE::SCONGetStatus() &rArr; SCONI::GetL2Rest() &rArr; SCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Rest()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Rest()
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::TestLink()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Max()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Max()
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusStepper()
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZMax()
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionYMax()
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionXMax()
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusHomed()
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusIDP()
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionZ()
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionY()
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionX()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionB()
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetPositionA()
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetStatusFA()
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Checking(unsigned char)
</UL>

<P><STRONG><a name="[12e]"></a>AUTOMATE::TCONGetStatus()</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, automate.o(i._ZN8AUTOMATE13TCONGetStatusEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AUTOMATE::TCONGetStatus() &rArr; TCONI::GetTemperatureEnvironment() &rArr; TCONI::Chr2Flo(char*, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::TestLink()
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEnvironment()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderB()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderA()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEBSetting()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEASetting()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBasePlane()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBPSetting()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderB()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderA()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerBasePlane()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderB()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderA()
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusExtruderB()
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusExtruderA()
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetStatusBasePlane()
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Checking(unsigned char)
</UL>

<P><STRONG><a name="[12f]"></a>AUTOMATE::InfoLCDRefreash()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, automate.o(i._ZN8AUTOMATE15InfoLCDRefreashEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = AUTOMATE::InfoLCDRefreash() &rArr; CCONI::SetInfoScreen() &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::TestLink()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::SetInfoScreen()
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::StatusBarRefresh()
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Checking(unsigned char)
</UL>

<P><STRONG><a name="[131]"></a>AUTOMATE::InterpreterRound()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, automate.o(i._ZN8AUTOMATE16InterpreterRoundEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = AUTOMATE::InterpreterRound() &rArr; INTERPRETER::Round() &rArr; INTERPRETER::Process() &rArr; SCONI::Motion(double*, float) &rArr; SCONI::Flo2Chr(char*, double, unsigned, unsigned, bool) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Round()
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Checking(unsigned char)
</UL>

<P><STRONG><a name="[130]"></a>AUTOMATE::StatusBarRefresh()</STRONG> (Thumb, 846 bytes, Stack size 16 bytes, automate.o(i._ZN8AUTOMATE16StatusBarRefreshEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AUTOMATE::StatusBarRefresh() &rArr; CCONI::SetStatusBar() &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::SetStatusBar()
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::InfoLCDRefreash()
</UL>

<P><STRONG><a name="[132]"></a>AUTOMATE::ConsoleGetCommand()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, automate.o(i._ZN8AUTOMATE17ConsoleGetCommandEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = AUTOMATE::ConsoleGetCommand() &rArr; SHELL::Decoder() &rArr; INSTRUCTION::ErrorInfo() &rArr; INSTRUCTION::PrintNum(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Decoder()
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::TestLink()
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::GetCommand()
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Checking(unsigned char)
</UL>

<P><STRONG><a name="[58]"></a>AUTOMATE::RTCGetStatusCount()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, automate.o(i._ZN8AUTOMATE17RTCGetStatusCountEv))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[57]"></a>AUTOMATE::AUX1GetStatusCount()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, automate.o(i._ZN8AUTOMATE18AUX1GetStatusCountEv))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[55]"></a>AUTOMATE::FCONGetStatusCount()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, automate.o(i._ZN8AUTOMATE18FCONGetStatusCountEv))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[54]"></a>AUTOMATE::SCONGetStatusCount()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, automate.o(i._ZN8AUTOMATE18SCONGetStatusCountEv))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[53]"></a>AUTOMATE::TCONGetStatusCount()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, automate.o(i._ZN8AUTOMATE18TCONGetStatusCountEv))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[52]"></a>AUTOMATE::InfoLCDRefreashCount()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, automate.o(i._ZN8AUTOMATE20InfoLCDRefreashCountEv))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[59]"></a>AUTOMATE::InterpreterRoundCount()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, automate.o(i._ZN8AUTOMATE21InterpreterRoundCountEv))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[56]"></a>AUTOMATE::ConsoleGetCommandCount()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, automate.o(i._ZN8AUTOMATE22ConsoleGetCommandCountEv))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[137]"></a>AUTOMATE::Init()</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, automate.o(i._ZN8AUTOMATE4InitEv))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6e]"></a>AUTOMATE::Checking(unsigned char)</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, automate.o(i._ZN8AUTOMATE8CheckingEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = AUTOMATE::Checking(unsigned char) &rArr; AUTOMATE::ConsoleGetCommand() &rArr; SHELL::Decoder() &rArr; INSTRUCTION::ErrorInfo() &rArr; INSTRUCTION::PrintNum(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::ConsoleGetCommand()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::InterpreterRound()
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::InfoLCDRefreash()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::TCONGetStatus()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::SCONGetStatus()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::FCONGetStatus()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::AUX1GetStatus()
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::MoveAxisZ(unsigned)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::MoveAxisY(unsigned)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::MoveAxisX(unsigned)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableNozzleB()
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::DisableNozzleA()
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableNozzleB()
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::EnableNozzleA()
</UL>

<P><STRONG><a name="[44]"></a>main</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = main &rArr; AUTOMATE::Checking(unsigned char) &rArr; AUTOMATE::ConsoleGetCommand() &rArr; SHELL::Decoder() &rArr; INSTRUCTION::ErrorInfo() &rArr; INSTRUCTION::PrintNum(unsigned) &rArr; CCONI::ConsoleDisplay(char*, bool) &rArr; IBUS::Transmit(char, char*, unsigned) &rArr; IBUS::Print(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Checking(unsigned char)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AUTOMATE::Init()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTCLOCK::Init()
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHELL::Init()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IBUS::Init()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CBUS::Init()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ABUS::Init()
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Init()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ad]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::GetInstruction()
</UL>

<P><STRONG><a name="[139]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[a3]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::SetInfoScreen()
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Round()
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::LocalAnalyse()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::CharToDouble(unsigned char*)
</UL>

<P><STRONG><a name="[13c]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[142]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[c9]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::AxisRound(double&, double)
</UL>

<P><STRONG><a name="[13f]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[91]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEnvironment()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderB()
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureExtruderA()
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEBSetting()
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureEASetting()
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBasePlane()
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetTemperatureBPSetting()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderB()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerExtruderA()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetHeaterPowerBasePlane()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderB()
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::GetCoolerPowerExtruderA()
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Rest()
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Rest()
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL2Max()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::GetL1Max()
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CCONI::SetInfoScreen()
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
</UL>

<P><STRONG><a name="[140]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::CharToDouble(unsigned char*)
</UL>

<P><STRONG><a name="[184]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[cb]"></a>__aeabi_l2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::AxisRound(double&, double)
</UL>

<P><STRONG><a name="[185]"></a>_ll_sto_d</STRONG> (Thumb, 162 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltll), UNUSED)

<P><STRONG><a name="[9a]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEBSetting(unsigned short)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureEASetting(unsigned short)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetTemperatureBPSetting(unsigned short)
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderB(unsigned char)
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::SetCoolerPowerExtruderA(unsigned char)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::MoveAxisZ(unsigned)
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::MoveAxisY(unsigned)
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::MoveAxisX(unsigned)
</UL>

<P><STRONG><a name="[186]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[fe]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
</UL>

<P><STRONG><a name="[141]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[145]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[90]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Chr2Flo(char*, unsigned, unsigned, bool)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::AxisRound(double&, double)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::GetInstruction()
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::CharToDouble(unsigned char*)
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INSTRUCTION::AutoHome()
</UL>

<P><STRONG><a name="[143]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[13b]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sfrom_d
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[13e]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[b6]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::Round()
</UL>

<P><STRONG><a name="[144]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[187]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)

<P><STRONG><a name="[146]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[fd]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Motion(double*, float)
</UL>

<P><STRONG><a name="[148]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[14c]"></a>__fpl_fcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fcmpi.o(x$fpl$fcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::LocalAnalyse()
</UL>

<P><STRONG><a name="[14a]"></a>_fdiv</STRONG> (Thumb, 384 bytes, Stack size 16 bytes, fdiv.o(x$fpl$fdiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Motion(double*, float)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::LocalAnalyse()
</UL>

<P><STRONG><a name="[14b]"></a>_fcmple</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_Inf
</UL>

<P><STRONG><a name="[14e]"></a>__fpl_fcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fleqf.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
</UL>

<P><STRONG><a name="[149]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[13a]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Motion(double*, float)
</UL>

<P><STRONG><a name="[14d]"></a>_frcmple</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, frleqf.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmple_InfNaN
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCONI::Flo2Chr(char*, double, unsigned, unsigned, bool)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERPRETER::AxisRound(double&, double)
</UL>

<P><STRONG><a name="[14f]"></a>_ll_sfrom_d</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, dfixll.o(x$fpl$llsfromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4f]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[50]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[147]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[13d]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
